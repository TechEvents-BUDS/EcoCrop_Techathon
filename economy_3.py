# -*- coding: utf-8 -*-
"""economy-3.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-MdckzIxH9-uHFtI9qNBU8wKtiyvxrlw
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

eco_data=pd.read_excel('fyp_dataset.xlsx', sheet_name='Economy Data')

eco_data.head()

eco_data.describe()

eco_data.shape

eco_data.info()

eco_data.isnull().sum()

eco_data.columns

numeric_data = eco_data.select_dtypes(include=['float64', 'int64'])
corr_matrix=numeric_data.corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation heatmap')
plt.show()

"""## Apple"""

apple_data = eco_data[eco_data['Crop'] == 'apple']

# List of regions for Area
regions_area = ['Punjab Area', 'Sindh Area', 'Khyber Pakhtoonkhaw Area', 'Balochistan Area', 'Pakistan Area']

# Plot Area for each region
for region in regions_area:
    plt.figure(figsize=(8, 5))
    plt.bar(apple_data['year_range'], apple_data[region], color='skyblue')
    plt.title(f"Area Trend for {region} ('000 Acres)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Area ('000 Acres)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Area trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_area[0:4]:
    plt.plot(apple_data['year_range'], apple_data[region], label=region, marker='o')

plt.title("Area Trend Comparison Across Regions ('000 Acres)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Area ('000 Acres)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# List of regions for Production
regions_production = ['Punjab Production', 'Sindh Production', 'Khyber Pakhtoonkhaw Production', 'Balochistan Production', 'Pakistan Production']

# Plot Production for each region
for region in regions_production:
    plt.figure(figsize=(8, 5))
    plt.bar(apple_data['year_range'], apple_data[region], color='green')
    plt.title(f"Production Trend for {region}", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Production", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Production trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_production[0:4]:
    plt.plot(apple_data['year_range'], apple_data[region], label=region, marker='o')

plt.title("Production Trend Comparison Across Regions ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Production ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

""" ## Comparison of Production with Area for Each Region"""

# Comparison of Production with Area for each region
for region_area, region_prod in zip(regions_area, regions_production):
    plt.figure(figsize=(10, 6))
    plt.plot(apple_data['year_range'], apple_data[region_area], label=f"{region_area} Area ('000 Acres)", marker='o')
    plt.plot(apple_data['year_range'], apple_data[region_prod], label=f"{region_prod} Production ('000 Tonnes)", marker='o')
    plt.title(f"Comparison of Production with Area for {region_area}", fontsize=14)
    plt.xlabel("Year Range", fontsize=12)
    plt.ylabel("Values", fontsize=12)
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# List of regions for Yield
regions_yield = ['Punjab Yield', 'Sindh Yield', 'Khyber Pakhtoonkhaw Yield', 'Balochistan Yield', 'Pakistan Yield']

# Plot Yield for each region
for region in regions_yield:
    plt.figure(figsize=(8, 5))
    plt.bar(apple_data['year_range'], apple_data[region], color='orange')
    plt.title(f"Yield Trend for {region} (40 Kg Per Acre)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Yield (40 Kg Per Acre)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Yield trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_yield[0:4]:
    plt.plot(apple_data['year_range'], apple_data[region], label=region, marker='o')

plt.title("Yield Trend Comparison Across Regions (40 Kg Per Acre)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Yield (40 Kg Per Acre)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

"""##  Comparison of Yield with Area for Each Region"""

# Comparison of Yield with Area for each region
for region_area, region_yield in zip(regions_area, regions_yield):
    plt.figure(figsize=(10, 6))
    plt.plot(apple_data['year_range'], apple_data[region_area], label=f"{region_area} Area ('000 Acres)", marker='o')
    plt.plot(apple_data['year_range'], apple_data[region_yield], label=f"{region_yield} Yield (40 Kg Per Acre)", marker='o')
    plt.title(f"Comparison of Yield with Area for {region_area}", fontsize=14)
    plt.xlabel("Year Range", fontsize=12)
    plt.ylabel("Values", fontsize=12)
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Plot Export Quantity
plt.figure(figsize=(8, 5))
plt.bar(apple_data['year_range'], apple_data['Export Quantity'], color='skyblue')
plt.title("Export Quantity ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Export Quantity ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot Export Value
plt.figure(figsize=(8, 5))
plt.bar(apple_data['year_range'], apple_data['Export Value'], color='green')
plt.title("Export Value (Million USD)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Export Value (Million USD)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Comparison of Export with Pakistan's Production and Yield
plt.figure(figsize=(10, 6))
plt.plot(apple_data['year_range'], apple_data['Export Quantity'], label="Export Quantity ('000 Tonnes)", marker='o')
plt.plot(apple_data['year_range'], apple_data['Pakistan Production'], label="Pakistan Production ('000 Tonnes)", marker='o')
plt.plot(apple_data['year_range'], apple_data['Pakistan Yield'], label="Pakistan Yield (40 Kg Per Acre)", marker='o')
plt.title("Comparison of Export with Pakistan's Production and Yield", fontsize=14)
plt.xlabel("Year Range", fontsize=12)
plt.ylabel("Values", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Plot Import Quantity
plt.figure(figsize=(8, 5))
plt.bar(apple_data['year_range'], apple_data['Import Quantity'], color='orange')
plt.title("Import Quantity ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Import Quantity ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot Import Value
plt.figure(figsize=(8, 5))
plt.bar(apple_data['year_range'], apple_data['Import Value'], color='red')
plt.title("Import Value (Million USD)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Import Value (Million USD)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Comparison of Import with Pakistan's Production and Yield
plt.figure(figsize=(10, 6))
plt.plot(apple_data['year_range'], apple_data['Import Quantity'], label="Import Quantity ('000 Tonnes)", marker='o')
plt.plot(apple_data['year_range'], apple_data['Pakistan Production'], label="Pakistan Production ('000 Tonnes)", marker='o')
plt.plot(apple_data['year_range'], apple_data['Pakistan Yield'], label="Pakistan Yield (40 Kg Per Acre)", marker='o')
plt.title("Comparison of Import with Pakistan's Production and Yield", fontsize=14)
plt.xlabel("Year Range", fontsize=12)
plt.ylabel("Values", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

"""## Model training and testing

## Punjab
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Create a new column 'year_start' by extracting the starting year
eco_data['year_start'] = eco_data['year_range'].str.split('-').str[0].astype(int)

# Define features (X) and target (Y) for Punjab Production
features = ['year_start', 'Punjab Area']
target = 'Punjab Production'

X = eco_data[features]
y = eco_data[target]

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Linear Regression
lr = LinearRegression()
lr.fit(X_train, y_train)
lr_pred = lr.predict(X_test)

# Random Forest Regressor
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
rf_pred = rf.predict(X_test)

# Decision Tree Regressor
dt = DecisionTreeRegressor(random_state=42)
dt.fit(X_train, y_train)
dt_pred = dt.predict(X_test)

# Evaluate Models
def evaluate_model(model_name, y_test, y_pred):
    rmse = mean_squared_error(y_test, y_pred, squared=False)
    r2 = r2_score(y_test, y_pred)
    print(f"{model_name} RMSE: {rmse:.2f}")
    print(f"{model_name} RÂ²: {r2:.2f}")

print("Results for Punjab Production:")
evaluate_model("Linear Regression", y_test, lr_pred)
evaluate_model("Random Forest", y_test, rf_pred)
evaluate_model("Decision Tree", y_test, dt_pred)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Create a new column 'year_start' by extracting the starting year
eco_data['year_start'] = eco_data['year_range'].str.split('-').str[0].astype(int)

# Define features (X) and target (Y) for Punjab Production
features = ['year_start', 'Punjab Area','Punjab Production']
target = 'Punjab Yield'

X = eco_data[features]
y = eco_data[target]

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Linear Regression
lr = LinearRegression()
lr.fit(X_train, y_train)
lr_pred = lr.predict(X_test)

# Random Forest Regressor
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
rf_pred = rf.predict(X_test)

# Decision Tree Regressor
dt = DecisionTreeRegressor(random_state=42)
dt.fit(X_train, y_train)
dt_pred = dt.predict(X_test)

# Evaluate Models
def evaluate_model(model_name, y_test, y_pred):
    rmse = mean_squared_error(y_test, y_pred, squared=False)
    r2 = r2_score(y_test, y_pred)
    print(f"{model_name} RMSE: {rmse:.2f}")
    print(f"{model_name} RÂ²: {r2:.2f}")

print("Results for Punjab Production:")
evaluate_model("Linear Regression", y_test, lr_pred)
evaluate_model("Random Forest", y_test, rf_pred)
evaluate_model("Decision Tree", y_test, dt_pred)

"""## Sindh"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Create a new column 'year_start' by extracting the starting year
eco_data['year_start'] = eco_data['year_range'].str.split('-').str[0].astype(int)

# Define features (X) and target (Y) for Punjab Production
features = ['year_start', 'Sindh Area']
target = 'Sindh Production'

X = eco_data[features]
y = eco_data[target]

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Linear Regression
lr = LinearRegression()
lr.fit(X_train, y_train)
lr_pred = lr.predict(X_test)

# Random Forest Regressor
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
rf_pred = rf.predict(X_test)

# Decision Tree Regressor
dt = DecisionTreeRegressor(random_state=42)
dt.fit(X_train, y_train)
dt_pred = dt.predict(X_test)

# Evaluate Models
def evaluate_model(model_name, y_test, y_pred):
    rmse = mean_squared_error(y_test, y_pred, squared=False)
    r2 = r2_score(y_test, y_pred)
    print(f"{model_name} RMSE: {rmse:.2f}")
    print(f"{model_name} RÂ²: {r2:.2f}")

print("Results for Punjab Production:")
evaluate_model("Linear Regression", y_test, lr_pred)
evaluate_model("Random Forest", y_test, rf_pred)
evaluate_model("Decision Tree", y_test, dt_pred)

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Create a new column 'year_start' by extracting the starting year
eco_data['year_start'] = eco_data['year_range'].str.split('-').str[0].astype(int)

# Define features (X) and target (Y) for Punjab Production
features = ['year_start', 'Sindh Area','Sindh Production']
target = 'Sindh Yield'

X = eco_data[features]
y = eco_data[target]

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Linear Regression
lr = LinearRegression()
lr.fit(X_train, y_train)
lr_pred = lr.predict(X_test)

# Random Forest Regressor
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
rf_pred = rf.predict(X_test)

# Decision Tree Regressor
dt = DecisionTreeRegressor(random_state=42)
dt.fit(X_train, y_train)
dt_pred = dt.predict(X_test)

# Evaluate Models
def evaluate_model(model_name, y_test, y_pred):
    rmse = mean_squared_error(y_test, y_pred, squared=False)
    r2 = r2_score(y_test, y_pred)
    print(f"{model_name} RMSE: {rmse:.2f}")
    print(f"{model_name} RÂ²: {r2:.2f}")

print("Results for Punjab Production:")
evaluate_model("Linear Regression", y_test, lr_pred)
evaluate_model("Random Forest", y_test, rf_pred)
evaluate_model("Decision Tree", y_test, dt_pred)

"""## Banana"""

banana_data = eco_data[eco_data['Crop'] == 'banana']

# List of regions for Area
regions_area = ['Punjab Area', 'Sindh Area', 'Khyber Pakhtoonkhaw Area', 'Balochistan Area', 'Pakistan Area']

# Plot Area for each region
for region in regions_area:
    plt.figure(figsize=(8, 5))
    plt.bar(banana_data['year_range'], banana_data[region], color='skyblue')
    plt.title(f"Area Trend for {region} ('000 Acres)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Area ('000 Acres)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Area trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_area[0:4]:
    plt.plot(banana_data['year_range'], banana_data[region], label=region, marker='o')

plt.title("Area Trend Comparison Across Regions ('000 Acres)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Area ('000 Acres)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# List of regions for Production
regions_production = ['Punjab Production', 'Sindh Production', 'Khyber Pakhtoonkhaw Production', 'Balochistan Production', 'Pakistan Production']

# Plot Production for each region
for region in regions_production:
    plt.figure(figsize=(8, 5))
    plt.bar(banana_data['year_range'], banana_data[region], color='green')
    plt.title(f"Production Trend for {region} ('000 Tonnes)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Production ('000 Tonnes)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Production trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_production[0:4]:
    plt.plot(banana_data['year_range'], banana_data[region], label=region, marker='o')

plt.title("Production Trend Comparison Across Regions ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Production ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

"""## Comparison of Production with Area for Each Region"""

# Comparison of Production with Area for each region
for region_area, region_prod in zip(regions_area, regions_production):
    plt.figure(figsize=(10, 6))
    plt.plot(banana_data['year_range'], banana_data[region_area], label=f"{region_area} Area ('000 Acres)", marker='o')
    plt.plot(banana_data['year_range'], banana_data[region_prod], label=f"{region_prod} Production ('000 Tonnes)", marker='o')
    plt.title(f"Comparison of Production with Area for {region_area}", fontsize=14)
    plt.xlabel("Year Range", fontsize=12)
    plt.ylabel("Values", fontsize=12)
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# List of regions for Yield
regions_yield = ['Punjab Yield', 'Sindh Yield', 'Khyber Pakhtoonkhaw Yield', 'Balochistan Yield', 'Pakistan Yield']

# Plot Yield for each region
for region in regions_yield:
    plt.figure(figsize=(8, 5))
    plt.bar(banana_data['year_range'], banana_data[region], color='orange')
    plt.title(f"Yield Trend for {region} (40 Kg Per Acre)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Yield (40 Kg Per Acre)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Yield trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_yield[0:4]:
    plt.plot(banana_data['year_range'], banana_data[region], label=region, marker='o')

plt.title("Yield Trend Comparison Across Regions (40 Kg Per Acre)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Yield (40 Kg Per Acre)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Comparison of Yield with Area for each region
for region_area, region_yield in zip(regions_area, regions_yield):
    plt.figure(figsize=(10, 6))
    plt.plot(banana_data['year_range'], banana_data[region_area], label=f"{region_area} Area ('000 Acres)", marker='o')
    plt.plot(banana_data['year_range'], banana_data[region_yield], label=f"{region_yield} Yield (40 Kg Per Acre)", marker='o')
    plt.title(f"Comparison of Yield with Area for {region_area}", fontsize=14)
    plt.xlabel("Year Range", fontsize=12)
    plt.ylabel("Values", fontsize=12)
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Plot Export Quantity
plt.figure(figsize=(8, 5))
plt.bar(banana_data['year_range'], banana_data['Export Quantity'], color='skyblue')
plt.title("Export Quantity ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Export Quantity ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot Export Value
plt.figure(figsize=(8, 5))
plt.bar(banana_data['year_range'], banana_data['Export Value'], color='green')
plt.title("Export Value (Million USD)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Export Value (Million USD)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Comparison of Export with Pakistan's Production and Yield
plt.figure(figsize=(10, 6))
plt.plot(banana_data['year_range'], banana_data['Export Quantity'], label="Export Quantity ('000 Tonnes)", marker='o')
plt.plot(banana_data['year_range'], banana_data['Pakistan Production'], label="Pakistan Production ('000 Tonnes)", marker='o')
plt.plot(banana_data['year_range'], banana_data['Pakistan Yield'], label="Pakistan Yield (40 Kg Per Acre)", marker='o')
plt.title("Comparison of Export with Pakistan's Production and Yield", fontsize=14)
plt.xlabel("Year Range", fontsize=12)
plt.ylabel("Values", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Plot Import Quantity
plt.figure(figsize=(8, 5))
plt.bar(banana_data['year_range'], banana_data['Import Quantity'], color='orange')
plt.title("Import Quantity ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Import Quantity ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot Import Value
plt.figure(figsize=(8, 5))
plt.bar(banana_data['year_range'], banana_data['Import Value'], color='red')
plt.title("Import Value (Million USD)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Import Value (Million USD)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Comparison of Import with Pakistan's Production and Yield
plt.figure(figsize=(10, 6))
plt.plot(banana_data['year_range'], banana_data['Import Quantity'], label="Import Quantity ('000 Tonnes)", marker='o')
plt.plot(banana_data['year_range'], banana_data['Pakistan Production'], label="Pakistan Production ('000 Tonnes)", marker='o')
plt.plot(banana_data['year_range'], banana_data['Pakistan Yield'], label="Pakistan Yield (40 Kg Per Acre)", marker='o')
plt.title("Comparison of Import with Pakistan's Production and Yield", fontsize=14)
plt.xlabel("Year Range", fontsize=12)
plt.ylabel("Values", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

"""
## Cotton"""

cotton_data = eco_data[eco_data['Crop'] == 'cotton']

# List of regions for Area
regions_area = ['Punjab Area', 'Sindh Area', 'Khyber Pakhtoonkhaw Area', 'Balochistan Area', 'Pakistan Area']

# Plot Area for each region
for region in regions_area:
    plt.figure(figsize=(8, 5))
    plt.bar(cotton_data['year_range'], cotton_data[region], color='skyblue')
    plt.title(f"Area Trend for {region} ('000 Acres)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Area ('000 Acres)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Area trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_area:
    plt.plot(cotton_data['year_range'], cotton_data[region], label=region, marker='o')

plt.title("Area Trend Comparison Across Regions ('000 Acres)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Area ('000 Acres)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# List of regions for Production
regions_production = ['Punjab Production', 'Sindh Production', 'Khyber Pakhtoonkhaw Production', 'Balochistan Production', 'Pakistan Production']

# Plot Production for each region
for region in regions_production:
    plt.figure(figsize=(8, 5))
    plt.bar(cotton_data['year_range'], cotton_data[region], color='green')
    plt.title(f"Production Trend for {region} ('000 Tonnes)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Production ('000 Tonnes)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Production trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_production[0:4]:
    plt.plot(cotton_data['year_range'], cotton_data[region], label=region, marker='o')

plt.title("Production Trend Comparison Across Regions ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Production ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Comparison of Production with Area for each region
for region_area, region_prod in zip(regions_area, regions_production):
    plt.figure(figsize=(10, 6))
    plt.plot(cotton_data['year_range'], cotton_data[region_area], label=f"{region_area} Area ('000 Acres)", marker='o')
    plt.plot(cotton_data['year_range'], cotton_data[region_prod], label=f"{region_prod} Production ('000 Tonnes)", marker='o')
    plt.title(f"Comparison of Production with Area for {region_area}", fontsize=14)
    plt.xlabel("Year Range", fontsize=12)
    plt.ylabel("Values", fontsize=12)
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# List of regions for Yield
regions_yield = ['Punjab Yield', 'Sindh Yield', 'Khyber Pakhtoonkhaw Yield', 'Balochistan Yield', 'Pakistan Yield']

# Plot Yield for each region
for region in regions_yield:
    plt.figure(figsize=(8, 5))
    plt.bar(cotton_data['year_range'], cotton_data[region], color='orange')
    plt.title(f"Yield Trend for {region} (40 Kg Per Acre)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Yield (40 Kg Per Acre)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Yield trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_yield[0:4]:
    plt.plot(cotton_data['year_range'], cotton_data[region], label=region, marker='o')

plt.title("Yield Trend Comparison Across Regions (40 Kg Per Acre)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Yield (40 Kg Per Acre)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Comparison of Yield with Area for each region
for region_area, region_yield in zip(regions_area, regions_yield):
    plt.figure(figsize=(10, 6))
    plt.plot(cotton_data['year_range'], cotton_data[region_area], label=f"{region_area} Area ('000 Acres)", marker='o')
    plt.plot(cotton_data['year_range'], cotton_data[region_yield], label=f"{region_yield} Yield (40 Kg Per Acre)", marker='o')
    plt.title(f"Comparison of Yield with Area for {region_area}", fontsize=14)
    plt.xlabel("Year Range", fontsize=12)
    plt.ylabel("Values", fontsize=12)
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Plot Export Quantity
plt.figure(figsize=(8, 5))
plt.bar(cotton_data['year_range'], cotton_data['Export Quantity'], color='skyblue')
plt.title("Export Quantity ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Export Quantity ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot Export Value
plt.figure(figsize=(8, 5))
plt.bar(cotton_data['year_range'], cotton_data['Export Value'], color='green')
plt.title("Export Value (Million USD)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Export Value (Million USD)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Comparison of Export with Pakistan's Production and Yield
plt.figure(figsize=(10, 6))
plt.plot(cotton_data['year_range'], cotton_data['Export Quantity'], label="Export Quantity ('000 Tonnes)", marker='o')
plt.plot(cotton_data['year_range'], cotton_data['Pakistan Production'], label="Pakistan Production ('000 Tonnes)", marker='o')
plt.plot(cotton_data['year_range'], cotton_data['Pakistan Yield'], label="Pakistan Yield (40 Kg Per Acre)", marker='o')
plt.title("Comparison of Export with Pakistan's Production and Yield", fontsize=14)
plt.xlabel("Year Range", fontsize=12)
plt.ylabel("Values", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Plot Import Quantity
plt.figure(figsize=(8, 5))
plt.bar(cotton_data['year_range'], cotton_data['Import Quantity'], color='orange')
plt.title("Import Quantity ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Import Quantity ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot Import Value
plt.figure(figsize=(8, 5))
plt.bar(cotton_data['year_range'], cotton_data['Import Value'], color='red')
plt.title("Import Value (Million USD)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Import Value (Million USD)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Comparison of Import with Pakistan's Production and Yield
plt.figure(figsize=(10, 6))
plt.plot(cotton_data['year_range'], cotton_data['Import Quantity'], label="Import Quantity ('000 Tonnes)", marker='o')
plt.plot(cotton_data['year_range'], cotton_data['Pakistan Production'], label="Pakistan Production ('000 Tonnes)", marker='o')
plt.plot(cotton_data['year_range'], cotton_data['Pakistan Yield'], label="Pakistan Yield (40 Kg Per Acre)", marker='o')
plt.title("Comparison of Import with Pakistan's Production and Yield", fontsize=14)
plt.xlabel("Year Range", fontsize=12)
plt.ylabel("Values", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

"""## Grapes"""

# Filter the data for the crop "Grapes"
grapes_data = eco_data[eco_data['Crop'] == 'grapes']

# List of regions for Area
regions_area = ['Punjab Area', 'Sindh Area', 'Khyber Pakhtoonkhaw Area', 'Balochistan Area', 'Pakistan Area']

# Plot Area for each region
for region in regions_area:
    plt.figure(figsize=(8, 5))
    plt.bar(grapes_data['year_range'], grapes_data[region], color='skyblue')
    plt.title(f"Area Trend for {region} ('000 Acres)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Area ('000 Acres)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Area trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_area[0:4]:
    plt.plot(grapes_data['year_range'], grapes_data[region], label=region, marker='o')

plt.title("Area Trend Comparison Across Regions ('000 Acres)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Area ('000 Acres)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# List of regions for Production
regions_production = ['Punjab Production', 'Sindh Production', 'Khyber Pakhtoonkhaw Production', 'Balochistan Production', 'Pakistan Production']

# Plot Production for each region
for region in regions_production:
    plt.figure(figsize=(8, 5))
    plt.bar(grapes_data['year_range'], grapes_data[region], color='green')
    plt.title(f"Production Trend for {region} ('000 Tonnes)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Production ('000 Tonnes)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()


# Plot Production trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_production[0:4]:
    plt.plot(grapes_data['year_range'], grapes_data[region], label=region, marker='o')

plt.title("Production Trend Comparison Across Regions ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Production ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Comparison of Production with Area for each region
for region_area, region_prod in zip(regions_area, regions_production):
    plt.figure(figsize=(10, 6))
    plt.plot(grapes_data['year_range'], grapes_data[region_area], label=f"{region_area} Area ('000 Acres)", marker='o')
    plt.plot(grapes_data['year_range'], grapes_data[region_prod], label=f"{region_prod} Production ('000 Tonnes)", marker='o')
    plt.title(f"Comparison of Production with Area for {region_area}", fontsize=14)
    plt.xlabel("Year Range", fontsize=12)
    plt.ylabel("Values", fontsize=12)
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# List of regions for Yield
regions_yield = ['Punjab Yield', 'Sindh Yield', 'Khyber Pakhtoonkhaw Yield', 'Balochistan Yield', 'Pakistan Yield']

# Plot Yield for each region
for region in regions_yield:
    plt.figure(figsize=(8, 5))
    plt.bar(grapes_data['year_range'], grapes_data[region], color='orange')
    plt.title(f"Yield Trend for {region} (40 Kg Per Acre)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Yield (40 Kg Per Acre)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Yield trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_yield[0:4]:
    plt.plot(grapes_data['year_range'], grapes_data[region], label=region, marker='o')

plt.title("Yield Trend Comparison Across Regions (40 Kg Per Acre)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Yield (40 Kg Per Acre)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Comparison of Yield with Area for each region
for region_area, region_yield in zip(regions_area, regions_yield):
    plt.figure(figsize=(10, 6))
    plt.plot(grapes_data['year_range'], grapes_data[region_area], label=f"{region_area} Area ('000 Acres)", marker='o')
    plt.plot(grapes_data['year_range'], grapes_data[region_yield], label=f"{region_yield} Yield (40 Kg Per Acre)", marker='o')
    plt.title(f"Comparison of Yield with Area for {region_area}", fontsize=14)
    plt.xlabel("Year Range", fontsize=12)
    plt.ylabel("Values", fontsize=12)
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Plot Export Quantity
plt.figure(figsize=(8, 5))
plt.bar(grapes_data['year_range'], grapes_data['Export Quantity'], color='skyblue')
plt.title("Export Quantity ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Export Quantity ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot Export Value
plt.figure(figsize=(8, 5))
plt.bar(grapes_data['year_range'], grapes_data['Export Value'], color='green')
plt.title("Export Value (Million USD)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Export Value (Million USD)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Comparison of Export with Pakistan's Production and Yield
plt.figure(figsize=(10, 6))
plt.plot(grapes_data['year_range'], grapes_data['Export Quantity'], label="Export Quantity ('000 Tonnes)", marker='o')
plt.plot(grapes_data['year_range'], grapes_data['Pakistan Production'], label="Pakistan Production ('000 Tonnes)", marker='o')
plt.plot(grapes_data['year_range'], grapes_data['Pakistan Yield'], label="Pakistan Yield (40 Kg Per Acre)", marker='o')
plt.title("Comparison of Export with Pakistan's Production and Yield", fontsize=14)
plt.xlabel("Year Range", fontsize=12)
plt.ylabel("Values", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Plot Import Quantity
plt.figure(figsize=(8, 5))
plt.bar(grapes_data['year_range'], grapes_data['Import Quantity'], color='orange')
plt.title("Import Quantity ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Import Quantity ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot Import Value
plt.figure(figsize=(8, 5))
plt.bar(grapes_data['year_range'], grapes_data['Import Value'], color='red')
plt.title("Import Value (Million USD)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Import Value (Million USD)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Comparison of Import with Pakistan's Production and Yield
plt.figure(figsize=(10, 6))
plt.plot(grapes_data['year_range'], grapes_data['Import Quantity'], label="Import Quantity ('000 Tonnes)", marker='o')
plt.plot(grapes_data['year_range'], grapes_data['Pakistan Production'], label="Pakistan Production ('000 Tonnes)", marker='o')
plt.plot(grapes_data['year_range'], grapes_data['Pakistan Yield'], label="Pakistan Yield (40 Kg Per Acre)", marker='o')
plt.title("Comparison of Import with Pakistan's Production and Yield", fontsize=14)
plt.xlabel("Year Range", fontsize=12)
plt.ylabel("Values", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

"""## Mango"""

# Filter the data for the crop "Mango"
mango_data = eco_data[eco_data['Crop'] == 'mango']

# List of regions for Area
regions_area = ['Punjab Area', 'Sindh Area', 'Khyber Pakhtoonkhaw Area', 'Balochistan Area', 'Pakistan Area']

# Plot Area for each region
for region in regions_area:
    plt.figure(figsize=(8, 5))
    plt.bar(mango_data['year_range'], mango_data[region], color='skyblue')
    plt.title(f"Area Trend for {region} ('000 Acres)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Area ('000 Acres)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Area trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_area[0:4]:
    plt.plot(mango_data['year_range'], mango_data[region], label=region, marker='o')

plt.title("Area Trend Comparison Across Regions ('000 Acres)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Area ('000 Acres)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# List of regions for Production
regions_production = ['Punjab Production', 'Sindh Production', 'Khyber Pakhtoonkhaw Production', 'Balochistan Production', 'Pakistan Production']

# Plot Production for each region
for region in regions_production:
    plt.figure(figsize=(8, 5))
    plt.bar(mango_data['year_range'], mango_data[region], color='green')
    plt.title(f"Production Trend for {region} ('000 Tonnes)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Production ('000 Tonnes)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()



# Plot Production trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_production[0:4]:
    plt.plot(mango_data['year_range'], mango_data[region], label=region, marker='o')

plt.title("Production Trend Comparison Across Regions ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Production ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# List of regions for Yield
regions_yield = ['Punjab Yield', 'Sindh Yield', 'Khyber Pakhtoonkhaw Yield', 'Balochistan Yield', 'Pakistan Yield']

# Plot Yield for each region
for region in regions_yield:
    plt.figure(figsize=(8, 5))
    plt.bar(mango_data['year_range'], mango_data[region], color='orange')
    plt.title(f"Yield Trend for {region} (40 Kg Per Acre)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Yield (40 Kg Per Acre)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Yield trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_yield[0:4]:
    plt.plot(mango_data['year_range'], mango_data[region], label=region, marker='o')

plt.title("Yield Trend Comparison Across Regions (40 Kg Per Acre)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Yield (40 Kg Per Acre)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Plot Export Quantity
plt.figure(figsize=(8, 5))
plt.bar(mango_data['year_range'], mango_data['Export Quantity'], color='skyblue')
plt.title("Export Quantity ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Export Quantity ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot Export Value
plt.figure(figsize=(8, 5))
plt.bar(mango_data['year_range'], mango_data['Export Value'], color='green')
plt.title("Export Value (Million USD)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Export Value (Million USD)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot Import Quantity
plt.figure(figsize=(8, 5))
plt.bar(mango_data['year_range'], mango_data['Import Quantity'], color='orange')
plt.title("Import Quantity ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Import Quantity ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot Import Value
plt.figure(figsize=(8, 5))
plt.bar(mango_data['year_range'], mango_data['Import Value'], color='red')
plt.title("Import Value (Million USD)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Import Value (Million USD)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""## Onion"""

# Filter the data for the crop "Onion"
onion_data = eco_data[eco_data['Crop'] == 'onion']

# List of regions for Area
regions_area = ['Punjab Area', 'Sindh Area', 'Khyber Pakhtoonkhaw Area', 'Balochistan Area', 'Pakistan Area']

# Plot Area for each region
for region in regions_area:
    plt.figure(figsize=(8, 5))
    plt.bar(onion_data['year_range'], onion_data[region], color='skyblue')
    plt.title(f"Area Trend for {region} ('000 Acres)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Area ('000 Acres)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Area trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_area[0:4]:
    plt.plot(onion_data['year_range'], onion_data[region], label=region, marker='o')

plt.title("Area Trend Comparison Across Regions ('000 Acres)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Area ('000 Acres)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# List of regions for Production
regions_production = ['Punjab Production', 'Sindh Production', 'Khyber Pakhtoonkhaw Production', 'Balochistan Production', 'Pakistan Production']

# Plot Production for each region
for region in regions_production:
    plt.figure(figsize=(8, 5))
    plt.bar(onion_data['year_range'], onion_data[region], color='green')
    plt.title(f"Production Trend for {region} ('000 Tonnes)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Production ('000 Tonnes)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Production trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_production[0:4]:
    plt.plot(onion_data['year_range'], onion_data[region], label=region, marker='o')

plt.title("Production Trend Comparison Across Regions ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Production ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Comparison of Production with Area for each region
for region_area, region_prod in zip(regions_area, regions_production):
    plt.figure(figsize=(10, 6))
    plt.plot(onion_data['year_range'], onion_data[region_area], label=f"{region_area} Area ('000 Acres)", marker='o')
    plt.plot(onion_data['year_range'], onion_data[region_prod], label=f"{region_prod} Production ('000 Tonnes)", marker='o')
    plt.title(f"Comparison of Production with Area for {region_area}", fontsize=14)
    plt.xlabel("Year Range", fontsize=12)
    plt.ylabel("Values", fontsize=12)
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# List of regions for Yield
regions_yield = ['Punjab Yield', 'Sindh Yield', 'Khyber Pakhtoonkhaw Yield', 'Balochistan Yield', 'Pakistan Yield']

# Plot Yield for each region
for region in regions_yield:
    plt.figure(figsize=(8, 5))
    plt.bar(onion_data['year_range'], onion_data[region], color='orange')
    plt.title(f"Yield Trend for {region} (40 Kg Per Acre)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Yield (40 Kg Per Acre)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Yield trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_yield[0:4]:
    plt.plot(onion_data['year_range'], onion_data[region], label=region, marker='o')

plt.title("Yield Trend Comparison Across Regions (40 Kg Per Acre)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Yield (40 Kg Per Acre)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Comparison of Export with Pakistan's Production and Yield
plt.figure(figsize=(10, 6))
plt.plot(onion_data['year_range'], onion_data['Export Quantity'], label="Export Quantity ('000 Tonnes)", marker='o')
plt.plot(onion_data['year_range'], onion_data['Pakistan Production'], label="Pakistan Production ('000 Tonnes)", marker='o')
plt.plot(onion_data['year_range'], onion_data['Pakistan Yield'], label="Pakistan Yield (40 Kg Per Acre)", marker='o')
plt.title("Comparison of Export with Pakistan's Production and Yield", fontsize=14)
plt.xlabel("Year Range", fontsize=12)
plt.ylabel("Values", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Plot Export Quantity
plt.figure(figsize=(8, 5))
plt.bar(onion_data['year_range'], onion_data['Export Quantity'], color='skyblue')
plt.title("Export Quantity ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Export Quantity ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot Export Value
plt.figure(figsize=(8, 5))
plt.bar(onion_data['year_range'], onion_data['Export Value'], color='green')
plt.title("Export Value (Million USD)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Export Value (Million USD)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()
# Comparison of Export with Pakistan's Production and Yield
plt.figure(figsize=(10, 6))
plt.plot(onion_data['year_range'], onion_data['Export Quantity'], label="Export Quantity ('000 Tonnes)", marker='o')
plt.plot(onion_data['year_range'], onion_data['Pakistan Production'], label="Pakistan Production ('000 Tonnes)", marker='o')
plt.plot(onion_data['year_range'], onion_data['Pakistan Yield'], label="Pakistan Yield (40 Kg Per Acre)", marker='o')
plt.title("Comparison of Export with Pakistan's Production and Yield", fontsize=14)
plt.xlabel("Year Range", fontsize=12)
plt.ylabel("Values", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Plot Import Quantity
plt.figure(figsize=(8, 5))
plt.bar(onion_data['year_range'], onion_data['Import Quantity'], color='orange')
plt.title("Import Quantity ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Import Quantity ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot Import Value
plt.figure(figsize=(8, 5))
plt.bar(onion_data['year_range'], onion_data['Import Value'], color='red')
plt.title("Import Value (Million USD)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Import Value (Million USD)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Comparison of Import with Pakistan's Production and Yield
plt.figure(figsize=(10, 6))
plt.plot(onion_data['year_range'], onion_data['Import Quantity'], label="Import Quantity ('000 Tonnes)", marker='o')
plt.plot(onion_data['year_range'], onion_data['Pakistan Production'], label="Pakistan Production ('000 Tonnes)", marker='o')
plt.plot(onion_data['year_range'], onion_data['Pakistan Yield'], label="Pakistan Yield (40 Kg Per Acre)", marker='o')
plt.title("Comparison of Import with Pakistan's Production and Yield", fontsize=14)
plt.xlabel("Year Range", fontsize=12)
plt.ylabel("Values", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

"""## Pomegranate"""

# Filter the data for the crop "Pomegranate"
pomegranate_data = eco_data[eco_data['Crop'] == 'pomegranate']

# List of regions for Area
regions_area = ['Punjab Area', 'Sindh Area', 'Khyber Pakhtoonkhaw Area', 'Balochistan Area', 'Pakistan Area']

# Plot Area for each region
for region in regions_area:
    plt.figure(figsize=(8, 5))
    plt.bar(pomegranate_data['year_range'], pomegranate_data[region], color='skyblue')
    plt.title(f"Area Trend for {region} ('000 Acres)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Area ('000 Acres)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Area trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_area[0:4]:
    plt.plot(pomegranate_data['year_range'], pomegranate_data[region], label=region, marker='o')

plt.title("Area Trend Comparison Across Regions ('000 Acres)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Area ('000 Acres)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# List of regions for Production
regions_production = ['Punjab Production', 'Sindh Production', 'Khyber Pakhtoonkhaw Production', 'Balochistan Production', 'Pakistan Production']

# Plot Production for each region
for region in regions_production:
    plt.figure(figsize=(8, 5))
    plt.bar(pomegranate_data['year_range'], pomegranate_data[region], color='green')
    plt.title(f"Production Trend for {region} ('000 Tonnes)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Production ('000 Tonnes)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Production trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_production[0:4]:
    plt.plot(pomegranate_data['year_range'], pomegranate_data[region], label=region, marker='o')

plt.title("Production Trend Comparison Across Regions ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Production ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Comparison of Production with Area for each region
for region_area, region_prod in zip(regions_area, regions_production):
    plt.figure(figsize=(10, 6))
    plt.plot(pomegranate_data['year_range'], pomegranate_data[region_area], label=f"{region_area} Area ('000 Acres)", marker='o')
    plt.plot(pomegranate_data['year_range'], pomegranate_data[region_prod], label=f"{region_prod} Production ('000 Tonnes)", marker='o')
    plt.title(f"Comparison of Production with Area for {region_area}", fontsize=14)
    plt.xlabel("Year Range", fontsize=12)
    plt.ylabel("Values", fontsize=12)
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# List of regions for Yield
regions_yield = ['Punjab Yield', 'Sindh Yield', 'Khyber Pakhtoonkhaw Yield', 'Balochistan Yield', 'Pakistan Yield']

# Plot Yield for each region
for region in regions_yield:
    plt.figure(figsize=(8, 5))
    plt.bar(pomegranate_data['year_range'], pomegranate_data[region], color='orange')
    plt.title(f"Yield Trend for {region} (40 Kg Per Acre)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Yield (40 Kg Per Acre)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Yield trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_yield[0:4]:
    plt.plot(pomegranate_data['year_range'], pomegranate_data[region], label=region, marker='o')

plt.title("Yield Trend Comparison Across Regions (40 Kg Per Acre)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Yield (40 Kg Per Acre)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Comparison of Yield with Area for each region
for region_area, region_yield in zip(regions_area, regions_yield):
    plt.figure(figsize=(10, 6))
    plt.plot(pomegranate_data['year_range'], pomegranate_data[region_area], label=f"{region_area} Area ('000 Acres)", marker='o')
    plt.plot(pomegranate_data['year_range'], pomegranate_data[region_yield], label=f"{region_yield} Yield (40 Kg Per Acre)", marker='o')
    plt.title(f"Comparison of Yield with Area for {region_area}", fontsize=14)
    plt.xlabel("Year Range", fontsize=12)
    plt.ylabel("Values", fontsize=12)
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Plot Export Quantity
plt.figure(figsize=(8, 5))
plt.bar(pomegranate_data['year_range'], pomegranate_data['Export Quantity'], color='skyblue')
plt.title("Export Quantity ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Export Quantity ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot Export Value
plt.figure(figsize=(8, 5))
plt.bar(pomegranate_data['year_range'], pomegranate_data['Export Value'], color='green')
plt.title("Export Value (Million USD)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Export Value (Million USD)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Comparison of Export with Pakistan's Production and Yield
plt.figure(figsize=(10, 6))
plt.plot(pomegranate_data['year_range'], pomegranate_data['Export Quantity'], label="Export Quantity ('000 Tonnes)", marker='o')
plt.plot(pomegranate_data['year_range'], pomegranate_data['Pakistan Production'], label="Pakistan Production ('000 Tonnes)", marker='o')
plt.plot(pomegranate_data['year_range'], pomegranate_data['Pakistan Yield'], label="Pakistan Yield (40 Kg Per Acre)", marker='o')
plt.title("Comparison of Export with Pakistan's Production and Yield", fontsize=14)
plt.xlabel("Year Range", fontsize=12)
plt.ylabel("Values", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Plot Import Quantity
plt.figure(figsize=(8, 5))
plt.bar(pomegranate_data['year_range'], pomegranate_data['Import Quantity'], color='orange')
plt.title("Import Quantity ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Import Quantity ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot Import Value
plt.figure(figsize=(8, 5))
plt.bar(pomegranate_data['year_range'], pomegranate_data['Import Value'], color='red')
plt.title("Import Value (Million USD)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Import Value (Million USD)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Comparison of Import with Pakistan's Production and Yield
plt.figure(figsize=(10, 6))
plt.plot(pomegranate_data['year_range'], pomegranate_data['Import Quantity'], label="Import Quantity ('000 Tonnes)", marker='o')
plt.plot(pomegranate_data['year_range'], pomegranate_data['Pakistan Production'], label="Pakistan Production ('000 Tonnes)", marker='o')
plt.plot(pomegranate_data['year_range'], pomegranate_data['Pakistan Yield'], label="Pakistan Yield (40 Kg Per Acre)", marker='o')
plt.title("Comparison of Import with Pakistan's Production and Yield", fontsize=14)
plt.xlabel("Year Range", fontsize=12)
plt.ylabel("Values", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

"""## Potato"""

# Filter the data for the crop "Potato"
potato_data = eco_data[eco_data['Crop'] == 'potato']

# List of regions for Area
regions_area = ['Punjab Area', 'Sindh Area', 'Khyber Pakhtoonkhaw Area', 'Balochistan Area', 'Pakistan Area']

# Plot Area for each region
for region in regions_area:
    plt.figure(figsize=(8, 5))
    plt.bar(potato_data['year_range'], potato_data[region], color='skyblue')
    plt.title(f"Area Trend for {region} ('000 Acres)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Area ('000 Acres)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Area trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_area[0:4]:
    plt.plot(potato_data['year_range'], potato_data[region], label=region, marker='o')

plt.title("Area Trend Comparison Across Regions ('000 Acres)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Area ('000 Acres)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# List of regions for Production
regions_production = ['Punjab Production', 'Sindh Production', 'Khyber Pakhtoonkhaw Production', 'Balochistan Production', 'Pakistan Production']

# Plot Production for each region
for region in regions_production:
    plt.figure(figsize=(8, 5))
    plt.bar(potato_data['year_range'], potato_data[region], color='green')
    plt.title(f"Production Trend for {region} ('000 Tonnes)", fontsize=14)

    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Production ('000 Tonnes)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Production trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_production[0:4]:
    plt.plot(potato_data['year_range'], potato_data[region], label=region, marker='o')

plt.title("Production Trend Comparison Across Regions ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Production ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Comparison of Production with Area for each region
for region_area, region_prod in zip(regions_area, regions_production):
    plt.figure(figsize=(10, 6))
    plt.plot(potato_data['year_range'], potato_data[region_area], label=f"{region_area} Area ('000 Acres)", marker='o')
    plt.plot(potato_data['year_range'], potato_data[region_prod], label=f"{region_prod} Production ('000 Tonnes)", marker='o')
    plt.title(f"Comparison of Production with Area for {region_area}", fontsize=14)
    plt.xlabel("Year Range", fontsize=12)
    plt.ylabel("Values", fontsize=12)
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# List of regions for Yield
regions_yield = ['Punjab Yield', 'Sindh Yield', 'Khyber Pakhtoonkhaw Yield', 'Balochistan Yield', 'Pakistan Yield']

# Plot Yield for each region
for region in regions_yield:
    plt.figure(figsize=(8, 5))
    plt.bar(potato_data['year_range'], potato_data[region], color='orange')
    plt.title(f"Yield Trend for {region} (40 Kg Per Acre)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Yield (40 Kg Per Acre)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Yield trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_yield[0:4]:
    plt.plot(potato_data['year_range'], potato_data[region], label=region, marker='o')

plt.title("Yield Trend Comparison Across Regions (40 Kg Per Acre)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Yield (40 Kg Per Acre)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Comparison of Yield with Area for each region
for region_area, region_yield in zip(regions_area, regions_yield):
    plt.figure(figsize=(10, 6))
    plt.plot(potato_data['year_range'], potato_data[region_area], label=f"{region_area} Area ('000 Acres)", marker='o')
    plt.plot(potato_data['year_range'], potato_data[region_yield], label=f"{region_yield} Yield (40 Kg Per Acre)", marker='o')
    plt.title(f"Comparison of Yield with Area for {region_area}", fontsize=14)
    plt.xlabel("Year Range", fontsize=12)
    plt.ylabel("Values", fontsize=12)
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Plot Export Quantity
plt.figure(figsize=(8, 5))
plt.bar(potato_data['year_range'], potato_data['Export Quantity'], color='skyblue')
plt.title("Export Quantity ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Export Quantity ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot Export Value
plt.figure(figsize=(8, 5))
plt.bar(potato_data['year_range'], potato_data['Export Value'], color='green')
plt.title("Export Value (Million USD)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Export Value (Million USD)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Comparison of Export with Pakistan's Production and Yield
plt.figure(figsize=(10, 6))
plt.plot(potato_data['year_range'], potato_data['Export Quantity'], label="Export Quantity ('000 Tonnes)", marker='o')
plt.plot(potato_data['year_range'], potato_data['Pakistan Production'], label="Pakistan Production ('000 Tonnes)", marker='o')
plt.plot(potato_data['year_range'], potato_data['Pakistan Yield'], label="Pakistan Yield (40 Kg Per Acre)", marker='o')
plt.title("Comparison of Export with Pakistan's Production and Yield", fontsize=14)
plt.xlabel("Year Range", fontsize=12)
plt.ylabel("Values", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Plot Import Quantity
plt.figure(figsize=(8, 5))
plt.bar(potato_data['year_range'], potato_data['Import Quantity'], color='orange')
plt.title("Import Quantity ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Import Quantity ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot Import Value
plt.figure(figsize=(8, 5))
plt.bar(potato_data['year_range'], potato_data['Import Value'], color='red')
plt.title("Import Value (Million USD)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Import Value (Million USD)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Comparison of Import with Pakistan's Production and Yield
plt.figure(figsize=(10, 6))
plt.plot(potato_data['year_range'], potato_data['Import Quantity'], label="Import Quantity ('000 Tonnes)", marker='o')
plt.plot(potato_data['year_range'], potato_data['Pakistan Production'], label="Pakistan Production ('000 Tonnes)", marker='o')
plt.plot(potato_data['year_range'], potato_data['Pakistan Yield'], label="Pakistan Yield (40 Kg Per Acre)", marker='o')
plt.title("Comparison of Import with Pakistan's Production and Yield", fontsize=14)
plt.xlabel("Year Range", fontsize=12)
plt.ylabel("Values", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

"""## Rice"""

# Filter the data for the crop "Rice"
rice_data = eco_data[eco_data['Crop'] == 'rice']

# List of regions for Area
regions_area = ['Punjab Area', 'Sindh Area', 'Khyber Pakhtoonkhaw Area', 'Balochistan Area', 'Pakistan Area']

# Plot Area for each region
for region in regions_area:
    plt.figure(figsize=(8, 5))
    plt.bar(rice_data['year_range'], rice_data[region], color='skyblue')
    plt.title(f"Area Trend for {region} ('000 Acres)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Area ('000 Acres)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Area trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_area[0:4]:
    plt.plot(rice_data['year_range'], rice_data[region], label=region, marker='o')

plt.title("Area Trend Comparison Across Regions ('000 Acres)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Area ('000 Acres)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# List of regions for Production
regions_production = ['Punjab Production', 'Sindh Production', 'Khyber Pakhtoonkhaw Production', 'Balochistan Production', 'Pakistan Production']

# Plot Production for each region
for region in regions_production:
    plt.figure(figsize=(8, 5))
    plt.bar(rice_data['year_range'], rice_data[region], color='green')
    plt.title(f"Production Trend for {region} ('000 Tonnes)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Production ('000 Tonnes)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Production trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_production[0:4]:
    plt.plot(rice_data['year_range'], rice_data[region], label=region, marker='o')

plt.title("Production Trend Comparison Across Regions ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Production ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Comparison of Production with Area for each region
for region_area, region_prod in zip(regions_area, regions_production):
    plt.figure(figsize=(10, 6))
    plt.plot(rice_data['year_range'], rice_data[region_area], label=f"{region_area} Area ('000 Acres)", marker='o')
    plt.plot(rice_data['year_range'], rice_data[region_prod], label=f"{region_prod} Production ('000 Tonnes)", marker='o')
    plt.title(f"Comparison of Production with Area for {region_area}", fontsize=14)
    plt.xlabel("Year Range", fontsize=12)
    plt.ylabel("Values", fontsize=12)
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# List of regions for Yield
regions_yield = ['Punjab Yield', 'Sindh Yield', 'Khyber Pakhtoonkhaw Yield', 'Balochistan Yield', 'Pakistan Yield']

# Plot Yield for each region
for region in regions_yield:
    plt.figure(figsize=(8, 5))
    plt.bar(rice_data['year_range'], rice_data[region], color='orange')
    plt.title(f"Yield Trend for {region} (40 Kg Per Acre)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Yield (40 Kg Per Acre)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()
# Plot Yield trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_yield[0:4]:
    plt.plot(rice_data['year_range'], rice_data[region], label=region, marker='o')

plt.title("Yield Trend Comparison Across Regions (40 Kg Per Acre)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Yield (40 Kg Per Acre)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Comparison of Yield with Area for each region
for region_area, region_yield in zip(regions_area, regions_yield):
    plt.figure(figsize=(10, 6))
    plt.plot(rice_data['year_range'], rice_data[region_area], label=f"{region_area} Area ('000 Acres)", marker='o')
    plt.plot(rice_data['year_range'], rice_data[region_yield], label=f"{region_yield} Yield (40 Kg Per Acre)", marker='o')
    plt.title(f"Comparison of Yield with Area for {region_area}", fontsize=14)
    plt.xlabel("Year Range", fontsize=12)
    plt.ylabel("Values", fontsize=12)
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Plot Export Quantity
plt.figure(figsize=(8, 5))
plt.bar(rice_data['year_range'], rice_data['Export Quantity'], color='skyblue')
plt.title("Export Quantity ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Export Quantity ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot Export Value
plt.figure(figsize=(8, 5))
plt.bar(rice_data['year_range'], rice_data['Export Value'], color='green')
plt.title("Export Value (Million USD)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Export Value (Million USD)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Comparison of Export with Pakistan's Production and Yield
plt.figure(figsize=(10, 6))
plt.plot(rice_data['year_range'], rice_data['Export Quantity'], label="Export Quantity ('000 Tonnes)", marker='o')
plt.plot(rice_data['year_range'], rice_data['Pakistan Production'], label="Pakistan Production ('000 Tonnes)", marker='o')
plt.plot(rice_data['year_range'], rice_data['Pakistan Yield'], label="Pakistan Yield (40 Kg Per Acre)", marker='o')
plt.title("Comparison of Export with Pakistan's Production and Yield", fontsize=14)
plt.xlabel("Year Range", fontsize=12)
plt.ylabel("Values", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Plot Import Quantity
plt.figure(figsize=(8, 5))
plt.bar(rice_data['year_range'], rice_data['Import Quantity'], color='orange')
plt.title("Import Quantity ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Import Quantity ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot Import Value
plt.figure(figsize=(8, 5))
plt.bar(rice_data['year_range'], rice_data['Import Value'], color='red')
plt.title("Import Value (Million USD)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Import Value (Million USD)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""## Sugercane"""

# Filter the data for the crop "Sugarcane"
sugarcane_data = eco_data[eco_data['Crop'] == 'sugarcane']

# List of regions for Area
regions_area = ['Punjab Area', 'Sindh Area', 'Khyber Pakhtoonkhaw Area', 'Balochistan Area', 'Pakistan Area']

# Plot Area for each region
for region in regions_area:
    plt.figure(figsize=(8, 5))
    plt.bar(sugarcane_data['year_range'], sugarcane_data[region], color='skyblue')
    plt.title(f"Area Trend for {region} ('000 Acres)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Area ('000 Acres)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Area trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_area[0:4]:
    plt.plot(sugarcane_data['year_range'], sugarcane_data[region], label=region, marker='o')

plt.title("Area Trend Comparison Across Regions ('000 Acres)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Area ('000 Acres)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# List of regions for Production
regions_production = ['Punjab Production', 'Sindh Production', 'Khyber Pakhtoonkhaw Production', 'Balochistan Production', 'Pakistan Production']

# Plot Production for each region
for region in regions_production:
    plt.figure(figsize=(8, 5))
    plt.bar(sugarcane_data['year_range'], sugarcane_data[region], color='green')
    plt.title(f"Production Trend for {region} ('000 Tonnes)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Production ('000 Tonnes)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Production trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_production[0:4]:
    plt.plot(sugarcane_data['year_range'], sugarcane_data[region], label=region, marker='o')

plt.title("Production Trend Comparison Across Regions ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Production ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Comparison of Production with Area for each region
for region_area, region_prod in zip(regions_area, regions_production):
    plt.figure(figsize=(10, 6))
    plt.plot(sugarcane_data['year_range'], sugarcane_data[region_area], label=f"{region_area} Area ('000 Acres)", marker='o')
    plt.plot(sugarcane_data['year_range'], sugarcane_data[region_prod], label=f"{region_prod} Production ('000 Tonnes)", marker='o')
    plt.title(f"Comparison of Production with Area for {region_area}", fontsize=14)
    plt.xlabel("Year Range", fontsize=12)
    plt.ylabel("Values", fontsize=12)
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# List of regions for Yield
regions_yield = ['Punjab Yield', 'Sindh Yield', 'Khyber Pakhtoonkhaw Yield', 'Balochistan Yield', 'Pakistan Yield']

# Plot Yield for each region
for region in regions_yield:
    plt.figure(figsize=(8, 5))
    plt.bar(sugarcane_data['year_range'], sugarcane_data[region], color='orange')
    plt.title(f"Yield Trend for {region} (40 Kg Per Acre)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Yield (40 Kg Per Acre)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Yield trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_yield[0:4]:
    plt.plot(sugarcane_data['year_range'], sugarcane_data[region], label=region, marker='o')

plt.title("Yield Trend Comparison Across Regions (40 Kg Per Acre)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Yield (40 Kg Per Acre)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Comparison of Yield with Area for each region
for region_area, region_yield in zip(regions_area, regions_yield):
    plt.figure(figsize=(10, 6))
    plt.plot(sugarcane_data['year_range'], sugarcane_data[region_area], label=f"{region_area} Area ('000 Acres)", marker='o')
    plt.plot(sugarcane_data['year_range'], sugarcane_data[region_yield], label=f"{region_yield} Yield (40 Kg Per Acre)", marker='o')
    plt.title(f"Comparison of Yield with Area for {region_area}", fontsize=14)
    plt.xlabel("Year Range", fontsize=12)
    plt.ylabel("Values", fontsize=12)
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Plot Export Quantity
plt.figure(figsize=(8, 5))
plt.bar(sugarcane_data['year_range'], sugarcane_data['Export Quantity'], color='skyblue')
plt.title("Export Quantity ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Export Quantity ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot Export Value
plt.figure(figsize=(8, 5))
plt.bar(sugarcane_data['year_range'], sugarcane_data['Export Value'], color='green')
plt.title("Export Value (Million USD)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Export Value (Million USD)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Comparison of Export with Pakistan's Production and Yield
plt.figure(figsize=(10, 6))
plt.plot(sugarcane_data['year_range'], sugarcane_data['Export Quantity'], label="Export Quantity ('000 Tonnes)", marker='o')
plt.plot(sugarcane_data['year_range'], sugarcane_data['Pakistan Production'], label="Pakistan Production ('000 Tonnes)", marker='o')
plt.plot(sugarcane_data['year_range'], sugarcane_data['Pakistan Yield'], label="Pakistan Yield (40 Kg Per Acre)", marker='o')
plt.title("Comparison of Export with Pakistan's Production and Yield", fontsize=14)
plt.xlabel("Year Range", fontsize=12)
plt.ylabel("Values", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Plot Import Quantity
plt.figure(figsize=(8, 5))
plt.bar(sugarcane_data['year_range'], sugarcane_data['Import Quantity'], color='orange')
plt.title("Import Quantity ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Import Quantity ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot Import Value
plt.figure(figsize=(8, 5))
plt.bar(sugarcane_data['year_range'], sugarcane_data['Import Value'], color='red')
plt.title("Import Value (Million USD)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Import Value (Million USD)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Comparison of Import with Pakistan's Production and Yield
plt.figure(figsize=(10, 6))
plt.plot(sugarcane_data['year_range'], sugarcane_data['Import Quantity'], label="Import Quantity ('000 Tonnes)", marker='o')
plt.plot(sugarcane_data['year_range'], sugarcane_data['Pakistan Production'], label="Pakistan Production ('000 Tonnes)", marker='o')
plt.plot(sugarcane_data['year_range'], sugarcane_data['Pakistan Yield'], label="Pakistan Yield (40 Kg Per Acre)", marker='o')
plt.title("Comparison of Import with Pakistan's Production and Yield", fontsize=14)
plt.xlabel("Year Range", fontsize=12)
plt.ylabel("Values", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

"""## Tomato"""

# Filter the data for the crop "Tomato"
tomato_data = eco_data[eco_data['Crop'] == 'tomato']

# List of regions for Area
regions_area = ['Punjab Area', 'Sindh Area', 'Khyber Pakhtoonkhaw Area', 'Balochistan Area', 'Pakistan Area']

# Plot Area for each region
for region in regions_area:
    plt.figure(figsize=(8, 5))
    plt.bar(tomato_data['year_range'], tomato_data[region], color='skyblue')
    plt.title(f"Area Trend for {region} ('000 Acres)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Area ('000 Acres)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Area trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_area[0:4]:
    plt.plot(tomato_data['year_range'], tomato_data[region], label=region, marker='o')

plt.title("Area Trend Comparison Across Regions ('000 Acres)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Area ('000 Acres)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# List of regions for Production
regions_production = ['Punjab Production', 'Sindh Production', 'Khyber Pakhtoonkhaw Production', 'Balochistan Production', 'Pakistan Production']

# Plot Production for each region
for region in regions_production:
    plt.figure(figsize=(8, 5))
    plt.bar(tomato_data['year_range'], tomato_data[region], color='green')
    plt.title(f"Production Trend for {region} ('000 Tonnes)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Production ('000 Tonnes)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Production trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_production[0:4]:
    plt.plot(tomato_data['year_range'], tomato_data[region], label=region, marker='o')

plt.title("Production Trend Comparison Across Regions ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Production ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Comparison of Production with Area for each region
for region_area, region_prod in zip(regions_area, regions_production):
    plt.figure(figsize=(10, 6))
    plt.plot(tomato_data['year_range'], tomato_data[region_area], label=f"{region_area} Area ('000 Acres)", marker='o')
    plt.plot(tomato_data['year_range'], tomato_data[region_prod], label=f"{region_prod} Production ('000 Tonnes)", marker='o')
    plt.title(f"Comparison of Production with Area for {region_area}", fontsize=14)
    plt.xlabel("Year Range", fontsize=12)
    plt.ylabel("Values", fontsize=12)
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# List of regions for Yield
regions_yield = ['Punjab Yield', 'Sindh Yield', 'Khyber Pakhtoonkhaw Yield', 'Balochistan Yield', 'Pakistan Yield']

# Plot Yield for each region
for region in regions_yield:
    plt.figure(figsize=(8, 5))
    plt.bar(tomato_data['year_range'], tomato_data[region], color='orange')
    plt.title(f"Yield Trend for {region} (40 Kg Per Acre)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Yield (40 Kg Per Acre)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Yield trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_yield[0:4]:
    plt.plot(tomato_data['year_range'], tomato_data[region], label=region, marker='o')

plt.title("Yield Trend Comparison Across Regions (40 Kg Per Acre)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Yield (40 Kg Per Acre)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Comparison of Yield with Area for each region
for region_area, region_yield in zip(regions_area, regions_yield):
    plt.figure(figsize=(10, 6))
    plt.plot(tomato_data['year_range'], tomato_data[region_area], label=f"{region_area} Area ('000 Acres)", marker='o')
    plt.plot(tomato_data['year_range'], tomato_data[region_yield], label=f"{region_yield} Yield (40 Kg Per Acre)", marker='o')
    plt.title(f"Comparison of Yield with Area for {region_area}", fontsize=14)
    plt.xlabel("Year Range", fontsize=12)
    plt.ylabel("Values", fontsize=12)
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Plot Export Quantity
plt.figure(figsize=(8, 5))
plt.bar(tomato_data['year_range'], tomato_data['Export Quantity'], color='skyblue')
plt.title("Export Quantity ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Export Quantity ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot Export Value
plt.figure(figsize=(8, 5))
plt.bar(tomato_data['year_range'], tomato_data['Export Value'], color='green')
plt.title("Export Value (Million USD)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Export Value (Million USD)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Comparison of Export with Pakistan's Production and Yield
plt.figure(figsize=(10, 6))
plt.plot(tomato_data['year_range'], tomato_data['Export Quantity'], label="Export Quantity ('000 Tonnes)", marker='o')
plt.plot(tomato_data['year_range'], tomato_data['Pakistan Production'], label="Pakistan Production ('000 Tonnes)", marker='o')
plt.plot(tomato_data['year_range'], tomato_data['Pakistan Yield'], label="Pakistan Yield (40 Kg Per Acre)", marker='o')
plt.title("Comparison of Export with Pakistan's Production and Yield", fontsize=14)
plt.xlabel("Year Range", fontsize=12)
plt.ylabel("Values", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Plot Import Quantity
plt.figure(figsize=(8, 5))
plt.bar(tomato_data['year_range'], tomato_data['Import Quantity'], color='orange')
plt.title("Import Quantity ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Import Quantity ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot Import Value
plt.figure(figsize=(8, 5))
plt.bar(tomato_data['year_range'], tomato_data['Import Value'], color='red')
plt.title("Import Value (Million USD)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Import Value (Million USD)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Comparison of Import with Pakistan's Production and Yield
plt.figure(figsize=(10, 6))
plt.plot(tomato_data['year_range'], tomato_data['Import Quantity'], label="Import Quantity ('000 Tonnes)", marker='o')
plt.plot(tomato_data['year_range'], tomato_data['Pakistan Production'], label="Pakistan Production ('000 Tonnes)", marker='o')
plt.plot(tomato_data['year_range'], tomato_data['Pakistan Yield'], label="Pakistan Yield (40 Kg Per Acre)", marker='o')
plt.title("Comparison of Import with Pakistan's Production and Yield", fontsize=14)
plt.xlabel("Year Range", fontsize=12)
plt.ylabel("Values", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

"""## Wheat"""

# Filter the data for the crop "Wheat"
wheat_data = eco_data[eco_data['Crop'] == 'wheat']

# List of regions for Area
regions_area = ['Punjab Area', 'Sindh Area', 'Khyber Pakhtoonkhaw Area', 'Balochistan Area', 'Pakistan Area']

# Plot Area for each region
for region in regions_area:
    plt.figure(figsize=(8, 5))
    plt.bar(wheat_data['year_range'], wheat_data[region], color='skyblue')
    plt.title(f"Area Trend for {region} ('000 Acres)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Area ('000 Acres)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Area trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_area[0:4]:
    plt.plot(wheat_data['year_range'], wheat_data[region], label=region, marker='o')

plt.title("Area Trend Comparison Across Regions ('000 Acres)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Area ('000 Acres)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# List of regions for Production
regions_production = ['Punjab Production', 'Sindh Production', 'Khyber Pakhtoonkhaw Production', 'Balochistan Production', 'Pakistan Production']

# Plot Production for each region
for region in regions_production:
    plt.figure(figsize=(8, 5))
    plt.bar(wheat_data['year_range'], wheat_data[region], color='green')
    plt.title(f"Production Trend for {region} ('000 Tonnes)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Production ('000 Tonnes)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Production trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_production[0:4]:
    plt.plot(wheat_data['year_range'], wheat_data[region], label=region, marker='o')

plt.title("Production Trend Comparison Across Regions ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Production ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Comparison of Production with Area for each region
for region_area, region_prod in zip(regions_area, regions_production):
    plt.figure(figsize=(10, 6))
    plt.plot(wheat_data['year_range'], wheat_data[region_area], label=f"{region_area} Area ('000 Acres)", marker='o')
    plt.plot(wheat_data['year_range'], wheat_data[region_prod], label=f"{region_prod} Production ('000 Tonnes)", marker='o')
    plt.title(f"Comparison of Production with Area for {region_area}", fontsize=14)
    plt.xlabel("Year Range", fontsize=12)
    plt.ylabel("Values", fontsize=12)
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# List of regions for Yield
regions_yield = ['Punjab Yield', 'Sindh Yield', 'Khyber Pakhtoonkhaw Yield', 'Balochistan Yield', 'Pakistan Yield']

# Plot Yield for each region
for region in regions_yield:
    plt.figure(figsize=(8, 5))
    plt.bar(wheat_data['year_range'], wheat_data[region], color='orange')
    plt.title(f"Yield Trend for {region} (40 Kg Per Acre)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Yield (40 Kg Per Acre)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Yield trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_yield[0:4]:
    plt.plot(wheat_data['year_range'], wheat_data[region], label=region, marker='o')

plt.title("Yield Trend Comparison Across Regions (40 Kg Per Acre)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Yield (40 Kg Per Acre)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Comparison of Yield with Area for each region
for region_area, region_yield in zip(regions_area, regions_yield):
    plt.figure(figsize=(10, 6))
    plt.plot(wheat_data['year_range'], wheat_data[region_area], label=f"{region_area} Area ('000 Acres)", marker='o')
    plt.plot(wheat_data['year_range'], wheat_data[region_yield], label=f"{region_yield} Yield (40 Kg Per Acre)", marker='o')
    plt.title(f"Comparison of Yield with Area for {region_area}", fontsize=14)
    plt.xlabel("Year Range", fontsize=12)
    plt.ylabel("Values", fontsize=12)
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Plot Export Quantity
plt.figure(figsize=(8, 5))
plt.bar(wheat_data['year_range'], wheat_data['Export Quantity'], color='skyblue')
plt.title("Export Quantity ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Export Quantity ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot Export Value
plt.figure(figsize=(8, 5))
plt.bar(wheat_data['year_range'], wheat_data['Export Value'], color='green')
plt.title("Export Value (Million USD)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Export Value (Million USD)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Comparison of Export with Pakistan's Production and Yield
plt.figure(figsize=(10, 6))
plt.plot(wheat_data['year_range'], wheat_data['Export Quantity'], label="Export Quantity ('000 Tonnes)", marker='o')
plt.plot(wheat_data['year_range'], wheat_data['Pakistan Production'], label="Pakistan Production ('000 Tonnes)", marker='o')
plt.plot(wheat_data['year_range'], wheat_data['Pakistan Yield'], label="Pakistan Yield (40 Kg Per Acre)", marker='o')
plt.title("Comparison of Export with Pakistan's Production and Yield", fontsize=14)
plt.xlabel("Year Range", fontsize=12)
plt.ylabel("Values", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Plot Import Quantity
plt.figure(figsize=(8, 5))
plt.bar(wheat_data['year_range'], wheat_data['Import Quantity'], color='orange')
plt.title("Import Quantity ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Import Quantity ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot Import Value
plt.figure(figsize=(8, 5))
plt.bar(wheat_data['year_range'], wheat_data['Import Value'], color='red')
plt.title("Import Value (Million USD)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Import Value (Million USD)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Comparison of Import with Pakistan's Production and Yield
plt.figure(figsize=(10, 6))
plt.plot(wheat_data['year_range'], wheat_data['Import Quantity'], label="Import Quantity ('000 Tonnes)", marker='o')
plt.plot(wheat_data['year_range'], wheat_data['Pakistan Production'], label="Pakistan Production ('000 Tonnes)", marker='o')
plt.plot(wheat_data['year_range'], wheat_data['Pakistan Yield'], label="Pakistan Yield (40 Kg Per Acre)", marker='o')
plt.title("Comparison of Import with Pakistan's Production and Yield", fontsize=14)
plt.xlabel("Year Range", fontsize=12)
plt.ylabel("Values", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

"""## Dates"""

# Filter the data for the crop "Dates"
dates_data = eco_data[eco_data['Crop'] == 'dates']

# List of regions for Area
regions_area = ['Punjab Area', 'Sindh Area', 'Khyber Pakhtoonkhaw Area', 'Balochistan Area', 'Pakistan Area']

# Plot Area for each region
for region in regions_area:
    plt.figure(figsize=(8, 5))
    plt.bar(dates_data['year_range'], dates_data[region], color='skyblue')
    plt.title(f"Area Trend for {region} ('000 Acres)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Area ('000 Acres)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Area trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_area[0:4]:
    plt.plot(dates_data['year_range'], dates_data[region], label=region, marker='o')

plt.title("Area Trend Comparison Across Regions ('000 Acres)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Area ('000 Acres)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# List of regions for Production
regions_production = ['Punjab Production', 'Sindh Production', 'Khyber Pakhtoonkhaw Production', 'Balochistan Production', 'Pakistan Production']

# Plot Production for each region
for region in regions_production:
    plt.figure(figsize=(8, 5))
    plt.bar(dates_data['year_range'], dates_data[region], color='green')
    plt.title(f"Production Trend for {region} ('000 Tonnes)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Production ('000 Tonnes)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Production trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_production[0:4]:
    plt.plot(dates_data['year_range'], dates_data[region], label=region, marker='o')

plt.title("Production Trend Comparison Across Regions ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Production ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Comparison of Production with Area for each region
for region_area, region_prod in zip(regions_area, regions_production):
    plt.figure(figsize=(10, 6))
    plt.plot(dates_data['year_range'], dates_data[region_area], label=f"{region_area} Area ('000 Acres)", marker='o')
    plt.plot(dates_data['year_range'], dates_data[region_prod], label=f"{region_prod} Production ('000 Tonnes)", marker='o')
    plt.title(f"Comparison of Production with Area for {region_area}", fontsize=14)
    plt.xlabel("Year Range", fontsize=12)
    plt.ylabel("Values", fontsize=12)
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# List of regions for Yield
regions_yield = ['Punjab Yield', 'Sindh Yield', 'Khyber Pakhtoonkhaw Yield', 'Balochistan Yield', 'Pakistan Yield']

# Plot Yield for each region
for region in regions_yield:
    plt.figure(figsize=(8, 5))
    plt.bar(dates_data['year_range'], dates_data[region], color='orange')
    plt.title(f"Yield Trend for {region} (40 Kg Per Acre)", fontsize=14)
    plt.xlabel("Year", fontsize=12)
    plt.ylabel("Yield (40 Kg Per Acre)", fontsize=12)
    plt.xticks(rotation=45)
    plt.tight_layout()
    plt.show()

# Plot Yield trends for all regions together using line plot
plt.figure(figsize=(10, 6))
for region in regions_yield[0:4]:
    plt.plot(dates_data['year_range'], dates_data[region], label=region, marker='o')

plt.title("Yield Trend Comparison Across Regions (40 Kg Per Acre)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Yield (40 Kg Per Acre)", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Comparison of Yield with Area for each region
for region_area, region_yield in zip(regions_area, regions_yield):
    plt.figure(figsize=(10, 6))
    plt.plot(dates_data['year_range'], dates_data[region_area], label=f"{region_area} Area ('000 Acres)", marker='o')
    plt.plot(dates_data['year_range'], dates_data[region_yield], label=f"{region_yield} Yield (40 Kg Per Acre)", marker='o')
    plt.title(f"Comparison of Yield with Area for {region_area}", fontsize=14)
    plt.xlabel("Year Range", fontsize=12)
    plt.ylabel("Values", fontsize=12)
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Plot Export Quantity
plt.figure(figsize=(8, 5))
plt.bar(dates_data['year_range'], dates_data['Export Quantity'], color='skyblue')
plt.title("Export Quantity ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Export Quantity ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot Export Value
plt.figure(figsize=(8, 5))
plt.bar(dates_data['year_range'], dates_data['Export Value'], color='green')
plt.title("Export Value (Million USD)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Export Value (Million USD)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Comparison of Export with Pakistan's Production and Yield
plt.figure(figsize=(10, 6))
plt.plot(dates_data['year_range'], dates_data['Export Quantity'], label="Export Quantity ('000 Tonnes)", marker='o')
plt.plot(dates_data['year_range'], dates_data['Pakistan Production'], label="Pakistan Production ('000 Tonnes)", marker='o')
plt.plot(dates_data['year_range'], dates_data['Pakistan Yield'], label="Pakistan Yield (40 Kg Per Acre)", marker='o')
plt.title("Comparison of Export with Pakistan's Production and Yield", fontsize=14)
plt.xlabel("Year Range", fontsize=12)
plt.ylabel("Values", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Plot Import Quantity
plt.figure(figsize=(8, 5))
plt.bar(dates_data['year_range'], dates_data['Import Quantity'], color='orange')
plt.title("Import Quantity ('000 Tonnes)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Import Quantity ('000 Tonnes)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Plot Import Value
plt.figure(figsize=(8, 5))
plt.bar(dates_data['year_range'], dates_data['Import Value'], color='red')
plt.title("Import Value (Million USD)", fontsize=14)
plt.xlabel("Year", fontsize=12)
plt.ylabel("Import Value (Million USD)", fontsize=12)
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

# Comparison of Import with Pakistan's Production and Yield
plt.figure(figsize=(10, 6))
plt.plot(dates_data['year_range'], dates_data['Import Quantity'], label="Import Quantity ('000 Tonnes)", marker='o')
plt.plot(dates_data['year_range'], dates_data['Pakistan Production'], label="Pakistan Production ('000 Tonnes)", marker='o')
plt.plot(dates_data['year_range'], dates_data['Pakistan Yield'], label="Pakistan Yield (40 Kg Per Acre)", marker='o')
plt.title("Comparison of Import with Pakistan's Production and Yield", fontsize=14)
plt.xlabel("Year Range", fontsize=12)
plt.ylabel("Values", fontsize=12)
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

"""## Model Training and Testing

## Punjab
"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Create a new column 'year_start' by extracting the starting year
eco_data['year_start'] = eco_data['year_range'].str.split('-').str[0].astype(int)

# Define features (X) and targets (Y) for Punjab
features = ['year_start', 'Punjab Area']
targets = ['Punjab Production', 'Punjab Yield']

X = eco_data[features]
y = eco_data[targets]  # Multi-output target

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Linear Regression
lr = LinearRegression()
lr.fit(X_train, y_train)
lr_pred = lr.predict(X_test)

# Random Forest Regressor
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
rf_pred = rf.predict(X_test)

# Decision Tree Regressor
dt = DecisionTreeRegressor(random_state=42)
dt.fit(X_train, y_train)
dt_pred = dt.predict(X_test)

# Evaluate Models
def evaluate_multi_output(model_name, y_test, y_pred):
    for i, target in enumerate(targets):
        rmse = mean_squared_error(y_test.iloc[:, i], y_pred[:, i], squared=False)
        r2 = r2_score(y_test.iloc[:, i], y_pred[:, i])
        print(f"{model_name} - {target}: RMSE = {rmse:.2f}, RÂ² = {r2:.2f}")

print("Results for Punjab (Multi-Output Regression):")
evaluate_multi_output("Linear Regression", y_test, lr_pred)
evaluate_multi_output("Random Forest", y_test, rf_pred)
evaluate_multi_output("Decision Tree", y_test, dt_pred)

"""## Sindh"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Create a new column 'year_start' by extracting the starting year
eco_data['year_start'] = eco_data['year_range'].str.split('-').str[0].astype(int)

# Define features (X) and targets (Y) for Sindh
features = ['year_start', 'Sindh Area']
targets = ['Sindh Production', 'Sindh Yield']

X = eco_data[features]
y = eco_data[targets]  # Multi-output target

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Linear Regression
lr = LinearRegression()
lr.fit(X_train, y_train)
lr_pred = lr.predict(X_test)

# Random Forest Regressor
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
rf_pred = rf.predict(X_test)

# Decision Tree Regressor
dt = DecisionTreeRegressor(random_state=42)
dt.fit(X_train, y_train)
dt_pred = dt.predict(X_test)

# Evaluate Models
def evaluate_multi_output(model_name, y_test, y_pred):
    for i, target in enumerate(targets):
        rmse = mean_squared_error(y_test.iloc[:, i], y_pred[:, i], squared=False)
        r2 = r2_score(y_test.iloc[:, i], y_pred[:, i])
        print(f"{model_name} - {target}: RMSE = {rmse:.2f}, RÂ² = {r2:.2f}")

print("Results for Sindh (Multi-Output Regression):")
evaluate_multi_output("Linear Regression", y_test, lr_pred)
evaluate_multi_output("Random Forest", y_test, rf_pred)
evaluate_multi_output("Decision Tree", y_test, dt_pred)

"""## Khyber PakhtoonKhaw"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Create a new column 'year_start' by extracting the starting year
eco_data['year_start'] = eco_data['year_range'].str.split('-').str[0].astype(int)

# Define features (X) and targets (Y) for Khyber Pakhtoonkhaw
features = ['year_start', 'Khyber Pakhtoonkhaw Area']
targets = ['Khyber Pakhtoonkhaw Production', 'Khyber Pakhtoonkhaw Yield']

X = eco_data[features]
y = eco_data[targets]  # Multi-output target

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Linear Regression
lr = LinearRegression()
lr.fit(X_train, y_train)
lr_pred = lr.predict(X_test)

# Random Forest Regressor
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
rf_pred = rf.predict(X_test)

# Decision Tree Regressor
dt = DecisionTreeRegressor(random_state=42)
dt.fit(X_train, y_train)
dt_pred = dt.predict(X_test)

# Evaluate Models
def evaluate_multi_output(model_name, y_test, y_pred):
    for i, target in enumerate(targets):
        rmse = mean_squared_error(y_test.iloc[:, i], y_pred[:, i], squared=False)
        r2 = r2_score(y_test.iloc[:, i], y_pred[:, i])
        print(f"{model_name} - {target}: RMSE = {rmse:.2f}, RÂ² = {r2:.2f}")

print("Results for Khyber Pakhtoonkhaw (Multi-Output Regression):")
evaluate_multi_output("Linear Regression", y_test, lr_pred)
evaluate_multi_output("Random Forest", y_test, rf_pred)
evaluate_multi_output("Decision Tree", y_test, dt_pred)

"""## Balochistan"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Create a new column 'year_start' by extracting the starting year
eco_data['year_start'] = eco_data['year_range'].str.split('-').str[0].astype(int)

# Define features (X) and targets (Y) for Balochistan
features = ['year_start', 'Balochistan Area']
targets = ['Balochistan Production', 'Balochistan Yield']

X = eco_data[features]
y = eco_data[targets]  # Multi-output target

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Linear Regression
lr = LinearRegression()
lr.fit(X_train, y_train)
lr_pred = lr.predict(X_test)

# Random Forest Regressor
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
rf_pred = rf.predict(X_test)

# Decision Tree Regressor
dt = DecisionTreeRegressor(random_state=42)
dt.fit(X_train, y_train)
dt_pred = dt.predict(X_test)

# Evaluate Models
def evaluate_multi_output(model_name, y_test, y_pred):
    for i, target in enumerate(targets):
        rmse = mean_squared_error(y_test.iloc[:, i], y_pred[:, i], squared=False)
        r2 = r2_score(y_test.iloc[:, i], y_pred[:, i])
        print(f"{model_name} - {target}: RMSE = {rmse:.2f}, RÂ² = {r2:.2f}")

print("Results for Balochistan (Multi-Output Regression):")
evaluate_multi_output("Linear Regression", y_test, lr_pred)
evaluate_multi_output("Random Forest", y_test, rf_pred)
evaluate_multi_output("Decision Tree", y_test, dt_pred)

"""## Pakistan"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Create a new column 'year_start' by extracting the starting year
eco_data['year_start'] = eco_data['year_range'].str.split('-').str[0].astype(int)

# Define features (X) and targets (Y) for Pakistan
features = ['year_start', 'Pakistan Area']
targets = ['Pakistan Production', 'Pakistan Yield']

X = eco_data[features]
y = eco_data[targets]  # Multi-output target

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Linear Regression
lr = LinearRegression()
lr.fit(X_train, y_train)
lr_pred = lr.predict(X_test)

# Random Forest Regressor
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
rf_pred = rf.predict(X_test)

# Decision Tree Regressor
dt = DecisionTreeRegressor(random_state=42)
dt.fit(X_train, y_train)
dt_pred = dt.predict(X_test)

# Evaluate Models
def evaluate_multi_output(model_name, y_test, y_pred):
    for i, target in enumerate(targets):
        rmse = mean_squared_error(y_test.iloc[:, i], y_pred[:, i], squared=False)
        r2 = r2_score(y_test.iloc[:, i], y_pred[:, i])
        print(f"{model_name} - {target}: RMSE = {rmse:.2f}, RÂ² = {r2:.2f}")

print("Results for Pakistan (Multi-Output Regression):")
evaluate_multi_output("Linear Regression", y_test, lr_pred)
evaluate_multi_output("Random Forest", y_test, rf_pred)
evaluate_multi_output("Decision Tree", y_test, dt_pred)

