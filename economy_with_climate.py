# -*- coding: utf-8 -*-
"""Economy_with_climate.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1-mSiF8Nn0HrUC9nYs9w4OtaiXP5TGdzk
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

ec_data=pd.read_excel('fyp_dataset.xlsx', sheet_name='Economy with Climate Index')

ec_data.head()

ec_data.describe()

ec_data.shape

ec_data.info()

ec_data.isnull().sum()

ec_data.columns

numeric_data = ec_data.select_dtypes(include=['float64', 'int64'])
corr_matrix=numeric_data.corr()
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm', fmt='.2f')
plt.title('Correlation heatmap')
plt.show()

"""## Apple"""

apple_data = ec_data[ec_data['Crop'] == 'apple'].copy()

regions = ['Punjab', 'Sindh', 'Khyber Pakhtoonkhaw', 'Balochistan']

for region in regions:
    plt.figure(figsize=(10, 6))
    sns.lineplot(data=apple_data, x='year_range', y=f'{region}_Climate_Index', label='Climate Index')
    sns.lineplot(data=apple_data, x='year_range', y=f'{region} Production', label='Production')
    sns.lineplot(data=apple_data, x='year_range', y=f'{region} Yield', label='Yield')
    plt.title(f'{region} - Trends of Climate Index, Production, and Yield')
    plt.xlabel('Year Range')
    plt.ylabel('Values')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

for region in regions:
    plt.figure(figsize=(10, 6))
    apple_data_melted = apple_data.melt(
        id_vars='year_range',
        value_vars=[f'{region} Production', f'{region} Yield', f'{region}_Climate_Index'],
        var_name='Metric',
        value_name='Value'
    )
    sns.barplot(data=apple_data_melted, x='year_range', y='Value', hue='Metric')
    plt.title(f'{region} - Climate Index vs. Production and Yield')
    plt.xlabel('Year Range')
    plt.ylabel('Values')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

apple_data['Total Production'] = apple_data[[f'{region} Production' for region in regions]].sum(axis=1)

for region in regions:
    apple_data[f'{region} Contribution'] = apple_data[f'{region} Production'] / apple_data['Total Production']

apple_data_melted = apple_data.melt(
    id_vars='year_range',
    value_vars=[f'{region} Contribution' for region in regions],
    var_name='Region',
    value_name='Contribution'
)

plt.figure(figsize=(10, 6))
sns.barplot(data=apple_data_melted, x='year_range', y='Contribution', hue='Region')
plt.title('Regional Contribution to Total Production')
plt.xlabel('Year Range')
plt.ylabel('Contribution')
plt.xticks(rotation=45)
plt.legend()

plt.tight_layout()
plt.show()

apple_data_melted = apple_data.melt(
    id_vars='year_range',
    value_vars=[f'{region}_Climate_Index' for region in regions],
    var_name='Region',
    value_name='Climate Index'
)

plt.figure(figsize=(10, 6))
sns.histplot(data=apple_data_melted, x='Climate Index', hue='Region', kde=True, multiple='stack')
plt.title('Yearly Comparison of Climate Index Distributions')
plt.xlabel('Climate Index')
plt.ylabel('Frequency')
plt.tight_layout()
plt.show()

for region in regions:
    apple_data[f'{region} Production Growth'] = apple_data[f'{region} Production'].pct_change() * 100
    apple_data[f'{region} Yield Growth'] = apple_data[f'{region} Yield'].pct_change() * 100
    apple_data[f'{region} Climate Index Growth'] = apple_data[f'{region}_Climate_Index'].pct_change() * 100

    plt.figure(figsize=(10, 6))
    sns.lineplot(data=apple_data, x='year_range', y=f'{region} Production Growth', label='Production Growth')
    sns.lineplot(data=apple_data, x='year_range', y=f'{region} Yield Growth', label='Yield Growth')
    sns.lineplot(data=apple_data, x='year_range', y=f'{region} Climate Index Growth', label='Climate Index Growth')
    plt.title(f'{region} - Growth Rates of Production, Yield, and Climate Index')
    plt.xlabel('Year Range')
    plt.ylabel('Growth Rate (%)')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

apple_data['Aggregate Production'] = apple_data[[f'{region} Production' for region in regions]].mean(axis=1)
apple_data['Aggregate Climate Index'] = apple_data[[f'{region}_Climate_Index' for region in regions]].mean(axis=1)

plt.figure(figsize=(10, 6))
sns.lineplot(data=apple_data, x='year_range', y='Aggregate Production', label='Aggregate Production')
sns.lineplot(data=apple_data, x='year_range', y='Aggregate Climate Index', label='Aggregate Climate Index')
plt.title('Aggregate Trends of Production and Climate Index')
plt.xlabel('Year Range')
plt.ylabel('Values')
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Visualization 1: Trends of Climate Index, Production, and Yield over time for each region
# Filter data for crop "banana"
banana_data = ec_data[ec_data['Crop'] == 'banana'].copy()

regions = ['Punjab', 'Sindh', 'Khyber Pakhtoonkhaw', 'Balochistan']

for region in regions:
    plt.figure(figsize=(10, 6))
    sns.lineplot(data=banana_data, x='year_range', y=f'{region}_Climate_Index', label='Climate Index')
    sns.lineplot(data=banana_data, x='year_range', y=f'{region} Production', label='Production')
    sns.lineplot(data=banana_data, x='year_range', y=f'{region} Yield', label='Yield')
    plt.title(f'{region} - Trends of Climate Index, Production, and Yield')
    plt.xlabel('Year Range')
    plt.ylabel('Values')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Visualization 2: Climate Index vs. Production and Yield comparison by region
for region in regions:
    plt.figure(figsize=(10, 6))
    banana_data_melted = banana_data.melt(
        id_vars='year_range',
        value_vars=[f'{region} Production', f'{region} Yield', f'{region}_Climate_Index'],
        var_name='Metric',
        value_name='Value'
    )
    sns.barplot(data=banana_data_melted, x='year_range', y='Value', hue='Metric')
    plt.title(f'{region} - Climate Index vs. Production and Yield')
    plt.xlabel('Year Range')
    plt.ylabel('Values')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Visualization 3: Regional contribution to total Production or Yield for all years
banana_data['Total Production'] = ec_data.loc[banana_data.index, [f'{region} Production' for region in regions]].sum(axis=1)

for region in regions:
    banana_data.loc[:, f'{region} Contribution'] = ec_data.loc[banana_data.index, f'{region} Production'] / banana_data['Total Production']

banana_data_melted = banana_data.melt(
    id_vars='year_range',
    value_vars=[f'{region} Contribution' for region in regions],
    var_name='Region',
    value_name='Contribution'
)

plt.figure(figsize=(10, 6))
sns.barplot(data=banana_data_melted, x='year_range', y='Contribution', hue='Region')
plt.title('Regional Contribution to Total Production')
plt.xlabel('Year Range')
plt.ylabel('Contribution')
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Visualization 4: Yearly comparison of Climate Index distributions across regions
banana_data_melted = banana_data.melt(
    id_vars='year_range',
    value_vars=[f'{region}_Climate_Index' for region in regions],
    var_name='Region',
    value_name='Climate Index'
)

plt.figure(figsize=(10, 6))
sns.histplot(data=banana_data_melted, x='Climate Index', hue='Region', kde=True, multiple='stack')
plt.title('Yearly Comparison of Climate Index Distributions')
plt.xlabel('Climate Index')
plt.ylabel('Frequency')
plt.tight_layout()
plt.show()

# Visualization 5: Growth rates of Production, Yield, and Climate Index for each region
for region in regions:
    banana_data[f'{region} Production Growth'] = banana_data[f'{region} Production'].pct_change() * 100
    banana_data[f'{region} Yield Growth'] = banana_data[f'{region} Yield'].pct_change() * 100
    banana_data[f'{region} Climate Index Growth'] = banana_data[f'{region}_Climate_Index'].pct_change() * 100

    plt.figure(figsize=(10, 6))
    sns.lineplot(data=banana_data, x='year_range', y=f'{region} Production Growth', label='Production Growth')
    sns.lineplot(data=banana_data, x='year_range', y=f'{region} Yield Growth', label='Yield Growth')
    sns.lineplot(data=banana_data, x='year_range', y=f'{region} Climate Index Growth', label='Climate Index Growth')
    plt.title(f'{region} - Growth Rates of Production, Yield, and Climate Index')
    plt.xlabel('Year Range')
    plt.ylabel('Growth Rate (%)')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Visualization: Import vs. Export Ratio Over Time for Banana
banana_data['Import/Export Ratio'] = banana_data['Import Value'] / banana_data['Export Value']
plt.figure(figsize=(10, 6))
sns.lineplot(data=banana_data, x='year_range', y='Import/Export Ratio', marker='o')
plt.title('Banana - Import/Export Ratio Over Time')
plt.xlabel('Year Range')
plt.ylabel('Import/Export Ratio')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""## Cotton"""

# Visualization 1: Trends of Climate Index, Production, and Yield over time for each region
cotton_data = ec_data[ec_data['Crop'] == 'cotton'].copy()

regions = ['Punjab', 'Sindh', 'Khyber Pakhtoonkhaw', 'Balochistan']

for region in regions:
    plt.figure(figsize=(10, 6))
    sns.lineplot(data=cotton_data, x='year_range', y=f'{region}_Climate_Index', label='Climate Index')
    sns.lineplot(data=cotton_data, x='year_range', y=f'{region} Production', label='Production')
    sns.lineplot(data=cotton_data, x='year_range', y=f'{region} Yield', label='Yield')
    plt.title(f'{region} - Trends of Climate Index, Production, and Yield')
    plt.xlabel('Year Range')
    plt.ylabel('Values')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Visualization 2: Regional contribution to total Production or Yield for all years
cotton_data['Total Production'] = ec_data.loc[cotton_data.index, [f'{region} Production' for region in regions]].sum(axis=1)

for region in regions:
    cotton_data.loc[:, f'{region} Contribution'] = ec_data.loc[cotton_data.index, f'{region} Production'] / cotton_data['Total Production']

cotton_data_melted = cotton_data.melt(
    id_vars='year_range',
    value_vars=[f'{region} Contribution' for region in regions],
    var_name='Region',
    value_name='Contribution'
)

plt.figure(figsize=(10, 6))
sns.barplot(data=cotton_data_melted, x='year_range', y='Contribution', hue='Region')
plt.title('Regional Contribution to Total Production')
plt.xlabel('Year Range')
plt.ylabel('Contribution')
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Visualization 4: Yearly comparison of Climate Index distributions across regions
cotton_data_melted = cotton_data.melt(
    id_vars='year_range',
    value_vars=[f'{region}_Climate_Index' for region in regions],
    var_name='Region',
    value_name='Climate Index'
)

plt.figure(figsize=(10, 6))
sns.histplot(data=cotton_data_melted, x='Climate Index', hue='Region', kde=True, multiple='stack')
plt.title('Yearly Comparison of Climate Index Distributions')
plt.xlabel('Climate Index')
plt.ylabel('Frequency')
plt.tight_layout()
plt.show()

# Visualization 5: Growth rates of Production, Yield, and Climate Index for each region
for region in regions:
    cotton_data[f'{region} Production Growth'] = cotton_data[f'{region} Production'].pct_change() * 100
    cotton_data[f'{region} Yield Growth'] = cotton_data[f'{region} Yield'].pct_change() * 100
    cotton_data[f'{region} Climate Index Growth'] = cotton_data[f'{region}_Climate_Index'].pct_change() * 100

    plt.figure(figsize=(10, 6))
    sns.lineplot(data=cotton_data, x='year_range', y=f'{region} Production Growth', label='Production Growth')
    sns.lineplot(data=cotton_data, x='year_range', y=f'{region} Yield Growth', label='Yield Growth')
    sns.lineplot(data=cotton_data, x='year_range', y=f'{region} Climate Index Growth', label='Climate Index Growth')
    plt.title(f'{region} - Growth Rates of Production, Yield, and Climate Index')
    plt.xlabel('Year Range')
    plt.ylabel('Growth Rate (%)')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Visualization: Import vs. Export Ratio Over Time for Banana
cotton_data['Import/Export Ratio'] = cotton_data['Import Value'] / cotton_data['Export Value']
plt.figure(figsize=(10, 6))
sns.lineplot(data=cotton_data, x='year_range', y='Import/Export Ratio', marker='o')
plt.title('Cotton - Import/Export Ratio Over Time')
plt.xlabel('Year Range')
plt.ylabel('Import/Export Ratio')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""## Grapes"""

# Visualization 1: Trends of Climate Index, Production, and Yield over time for each region
grapes_data = ec_data[ec_data['Crop'] == 'grapes'].copy()

regions = ['Punjab', 'Sindh', 'Khyber Pakhtoonkhaw', 'Balochistan']

for region in regions:
    plt.figure(figsize=(10, 6))
    sns.lineplot(data=grapes_data, x='year_range', y=f'{region}_Climate_Index', label='Climate Index')
    sns.lineplot(data=grapes_data, x='year_range', y=f'{region} Production', label='Production')
    sns.lineplot(data=grapes_data, x='year_range', y=f'{region} Yield', label='Yield')
    plt.title(f'{region} - Trends of Climate Index, Production, and Yield')
    plt.xlabel('Year Range')
    plt.ylabel('Values')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Visualization 3: Regional contribution to total Production or Yield for all years
grapes_data['Total Production'] = ec_data.loc[grapes_data.index, [f'{region} Production' for region in regions]].sum(axis=1)

for region in regions:
    grapes_data.loc[:, f'{region} Contribution'] = ec_data.loc[grapes_data.index, f'{region} Production'] / grapes_data['Total Production']

grapes_data_melted = grapes_data.melt(
    id_vars='year_range',
    value_vars=[f'{region} Contribution' for region in regions],
    var_name='Region',
    value_name='Contribution'
)

plt.figure(figsize=(10, 6))
sns.barplot(data=grapes_data_melted, x='year_range', y='Contribution', hue='Region')
plt.title('Regional Contribution to Total Production')
plt.xlabel('Year Range')
plt.ylabel('Contribution')
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Visualization 4: Yearly comparison of Climate Index distributions across regions
grapes_data_melted = grapes_data.melt(
    id_vars='year_range',
    value_vars=[f'{region}_Climate_Index' for region in regions],
    var_name='Region',
    value_name='Climate Index'
)

plt.figure(figsize=(10, 6))
sns.histplot(data=grapes_data_melted, x='Climate Index', hue='Region', kde=True, multiple='stack')
plt.title('Yearly Comparison of Climate Index Distributions')
plt.xlabel('Climate Index')
plt.ylabel('Frequency')
plt.tight_layout()
plt.show()

# Visualization 5: Growth rates of Production, Yield, and Climate Index for each region
for region in regions:
    grapes_data[f'{region} Production Growth'] = grapes_data[f'{region} Production'].pct_change() * 100
    grapes_data[f'{region} Yield Growth'] = grapes_data[f'{region} Yield'].pct_change() * 100
    grapes_data[f'{region} Climate Index Growth'] = grapes_data[f'{region}_Climate_Index'].pct_change() * 100

    plt.figure(figsize=(10, 6))
    sns.lineplot(data=grapes_data, x='year_range', y=f'{region} Production Growth', label='Production Growth')
    sns.lineplot(data=grapes_data, x='year_range', y=f'{region} Yield Growth', label='Yield Growth')
    sns.lineplot(data=grapes_data, x='year_range', y=f'{region} Climate Index Growth', label='Climate Index Growth')
    plt.title(f'{region} - Growth Rates of Production, Yield, and Climate Index')
    plt.xlabel('Year Range')
    plt.ylabel('Growth Rate (%)')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Visualization: Import vs. Export Ratio Over Time for Banana
grapes_data['Import/Export Ratio'] = grapes_data['Import Value'] / grapes_data['Export Value']
plt.figure(figsize=(10, 6))
sns.lineplot(data=grapes_data, x='year_range', y='Import/Export Ratio', marker='o')
plt.title('Grapes - Import/Export Ratio Over Time')
plt.xlabel('Year Range')
plt.ylabel('Import/Export Ratio')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""## Mango"""

mango_data = ec_data[ec_data['Crop'] == 'mango'].copy()
regions = ['Punjab', 'Sindh', 'Khyber Pakhtoonkhaw', 'Balochistan']

for region in regions:
    plt.figure(figsize=(10, 6))
    sns.lineplot(data=mango_data, x='year_range', y=f'{region}_Climate_Index', label='Climate Index')
    sns.lineplot(data=mango_data, x='year_range', y=f'{region} Production', label='Production')
    sns.lineplot(data=mango_data, x='year_range', y=f'{region} Yield', label='Yield')
    plt.title(f'{region} - Trends of Climate Index, Production, and Yield')
    plt.xlabel('Year Range')
    plt.ylabel('Values')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Visualization 3: Regional contribution to total Production or Yield for all years
mango_data['Total Production'] = ec_data.loc[mango_data.index, [f'{region} Production' for region in regions]].sum(axis=1)

for region in regions:
    mango_data.loc[:, f'{region} Contribution'] = ec_data.loc[mango_data.index, f'{region} Production'] / mango_data['Total Production']

mango_data_melted = mango_data.melt(
    id_vars='year_range',
    value_vars=[f'{region} Contribution' for region in regions],
    var_name='Region',
    value_name='Contribution'
)

plt.figure(figsize=(10, 6))
sns.barplot(data=mango_data_melted, x='year_range', y='Contribution', hue='Region')
plt.title('Regional Contribution to Total Production')
plt.xlabel('Year Range')
plt.ylabel('Contribution')
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Visualization 4: Yearly comparison of Climate Index distributions across regions
mango_data_melted = mango_data.melt(
    id_vars='year_range',
    value_vars=[f'{region}_Climate_Index' for region in regions],
    var_name='Region',
    value_name='Climate Index'
)

plt.figure(figsize=(10, 6))
sns.histplot(data=mango_data_melted, x='Climate Index', hue='Region', kde=True, multiple='stack')
plt.title('Yearly Comparison of Climate Index Distributions')
plt.xlabel('Climate Index')
plt.ylabel('Frequency')
plt.tight_layout()
plt.show()

# Visualization 5: Growth rates of Production, Yield, and Climate Index for each region
for region in regions:
    mango_data[f'{region} Production Growth'] = mango_data[f'{region} Production'].pct_change() * 100
    mango_data[f'{region} Yield Growth'] = mango_data[f'{region} Yield'].pct_change() * 100
    mango_data[f'{region} Climate Index Growth'] = mango_data[f'{region}_Climate_Index'].pct_change() * 100

    plt.figure(figsize=(10, 6))
    sns.lineplot(data=mango_data, x='year_range', y=f'{region} Production Growth', label='Production Growth')
    sns.lineplot(data=mango_data, x='year_range', y=f'{region} Yield Growth', label='Yield Growth')
    sns.lineplot(data=mango_data, x='year_range', y=f'{region} Climate Index Growth', label='Climate Index Growth')
    plt.title(f'{region} - Growth Rates of Production, Yield, and Climate Index')
    plt.xlabel('Year Range')
    plt.ylabel('Growth Rate (%)')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Visualization: Import vs. Export Ratio Over Time for Banana
mango_data['Import/Export Ratio'] = mango_data['Import Value'] / mango_data['Export Value']
plt.figure(figsize=(10, 6))
sns.lineplot(data=mango_data, x='year_range', y='Import/Export Ratio', marker='o')
plt.title('Mango - Import/Export Ratio Over Time')
plt.xlabel('Year Range')
plt.ylabel('Import/Export Ratio')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""## Onion"""

# Visualization 1: Trends of Climate Index, Production, and Yield over time for each region
onion_data = ec_data[ec_data['Crop'] == 'onion'].copy()

regions = ['Punjab', 'Sindh', 'Khyber Pakhtoonkhaw', 'Balochistan']

for region in regions:
    plt.figure(figsize=(10, 6))
    sns.lineplot(data=onion_data, x='year_range', y=f'{region}_Climate_Index', label='Climate Index')
    sns.lineplot(data=onion_data, x='year_range', y=f'{region} Production', label='Production')
    sns.lineplot(data=onion_data, x='year_range', y=f'{region} Yield', label='Yield')
    plt.title(f'{region} - Trends of Climate Index, Production, and Yield')
    plt.xlabel('Year Range')
    plt.ylabel('Values')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Visualization 3: Regional contribution to total Production or Yield for all years
onion_data['Total Production'] = ec_data.loc[onion_data.index, [f'{region} Production' for region in regions]].sum(axis=1)

for region in regions:
    onion_data.loc[:, f'{region} Contribution'] = ec_data.loc[onion_data.index, f'{region} Production'] / onion_data['Total Production']

onion_data_melted = onion_data.melt(
    id_vars='year_range',
    value_vars=[f'{region} Contribution' for region in regions],
    var_name='Region',
    value_name='Contribution'
)

plt.figure(figsize=(10, 6))
sns.barplot(data=onion_data_melted, x='year_range', y='Contribution', hue='Region')
plt.title('Regional Contribution to Total Production')
plt.xlabel('Year Range')
plt.ylabel('Contribution')
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Visualization 4: Yearly comparison of Climate Index distributions across regions
onion_data_melted = onion_data.melt(
    id_vars='year_range',
    value_vars=[f'{region}_Climate_Index' for region in regions],
    var_name='Region',
    value_name='Climate Index'
)

plt.figure(figsize=(10, 6))
sns.histplot(data=onion_data_melted, x='Climate Index', hue='Region', kde=True, multiple='stack')
plt.title('Yearly Comparison of Climate Index Distributions')
plt.xlabel('Climate Index')
plt.ylabel('Frequency')
plt.tight_layout()
plt.show()

# Visualization 5: Growth rates of Production, Yield, and Climate Index for each region
for region in regions:
    onion_data[f'{region} Production Growth'] = onion_data[f'{region} Production'].pct_change() * 100
    onion_data[f'{region} Yield Growth'] = onion_data[f'{region} Yield'].pct_change() * 100
    onion_data[f'{region} Climate Index Growth'] = onion_data[f'{region}_Climate_Index'].pct_change() * 100

    plt.figure(figsize=(10, 6))
    sns.lineplot(data=onion_data, x='year_range', y=f'{region} Production Growth', label='Production Growth')
    sns.lineplot(data=onion_data, x='year_range', y=f'{region} Yield Growth', label='Yield Growth')
    sns.lineplot(data=onion_data, x='year_range', y=f'{region} Climate Index Growth', label='Climate Index Growth')
    plt.title(f'{region} - Growth Rates of Production, Yield, and Climate Index')
    plt.xlabel('Year Range')
    plt.ylabel('Growth Rate (%)')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Visualization: Import vs. Export Ratio Over Time for Banana
onion_data['Import/Export Ratio'] = onion_data['Import Value'] / onion_data['Export Value']
plt.figure(figsize=(10, 6))
sns.lineplot(data=onion_data, x='year_range', y='Import/Export Ratio', marker='o')
plt.title('Onion - Import/Export Ratio Over Time')
plt.xlabel('Year Range')
plt.ylabel('Import/Export Ratio')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""## Pomegranate"""

# Visualization 1: Trends of Climate Index, Production, and Yield over time for each region
pomegranate_data = ec_data[ec_data['Crop'] == 'pomegranate'].copy()

regions = ['Punjab', 'Sindh', 'Khyber Pakhtoonkhaw', 'Balochistan']

for region in regions:
    plt.figure(figsize=(10, 6))
    sns.lineplot(data=pomegranate_data, x='year_range', y=f'{region}_Climate_Index', label='Climate Index')
    sns.lineplot(data=pomegranate_data, x='year_range', y=f'{region} Production', label='Production')
    sns.lineplot(data=pomegranate_data, x='year_range', y=f'{region} Yield', label='Yield')
    plt.title(f'{region} - Trends of Climate Index, Production, and Yield')
    plt.xlabel('Year Range')
    plt.ylabel('Values')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Visualization 3: Regional contribution to total Production or Yield for all years
pomegranate_data['Total Production'] = ec_data.loc[pomegranate_data.index, [f'{region} Production' for region in regions]].sum(axis=1)

for region in regions:
    pomegranate_data.loc[:, f'{region} Contribution'] = ec_data.loc[pomegranate_data.index, f'{region} Production'] / pomegranate_data['Total Production']

pomegranate_data_melted = pomegranate_data.melt(
    id_vars='year_range',
    value_vars=[f'{region} Contribution' for region in regions],
    var_name='Region',
    value_name='Contribution'
)

plt.figure(figsize=(10, 6))
sns.barplot(data=pomegranate_data_melted, x='year_range', y='Contribution', hue='Region')
plt.title('Regional Contribution to Total Production')
plt.xlabel('Year Range')
plt.ylabel('Contribution')
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Visualization 4: Yearly comparison of Climate Index distributions across regions
pomegranate_data_melted = pomegranate_data.melt(
    id_vars='year_range',
    value_vars=[f'{region}_Climate_Index' for region in regions],
    var_name='Region',
    value_name='Climate Index'
)

plt.figure(figsize=(10, 6))
sns.histplot(data=pomegranate_data_melted, x='Climate Index', hue='Region', kde=True, multiple='stack')
plt.title('Yearly Comparison of Climate Index Distributions')
plt.xlabel('Climate Index')
plt.ylabel('Frequency')
plt.tight_layout()
plt.show()

# Visualization 5: Growth rates of Production, Yield, and Climate Index for each region
for region in regions:
    pomegranate_data[f'{region} Production Growth'] = pomegranate_data[f'{region} Production'].pct_change() * 100
    pomegranate_data[f'{region} Yield Growth'] = pomegranate_data[f'{region} Yield'].pct_change() * 100
    pomegranate_data[f'{region} Climate Index Growth'] = pomegranate_data[f'{region}_Climate_Index'].pct_change() * 100

    plt.figure(figsize=(10, 6))
    sns.lineplot(data=pomegranate_data, x='year_range', y=f'{region} Production Growth', label='Production Growth')
    sns.lineplot(data=pomegranate_data, x='year_range', y=f'{region} Yield Growth', label='Yield Growth')
    sns.lineplot(data=pomegranate_data, x='year_range', y=f'{region} Climate Index Growth', label='Climate Index Growth')
    plt.title(f'{region} - Growth Rates of Production, Yield, and Climate Index')
    plt.xlabel('Year Range')
    plt.ylabel('Growth Rate (%)')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Visualization: Import vs. Export Ratio Over Time for Banana
pomegranate_data['Import/Export Ratio'] = pomegranate_data['Import Value'] / pomegranate_data['Export Value']
plt.figure(figsize=(10, 6))
sns.lineplot(data=pomegranate_data, x='year_range', y='Import/Export Ratio', marker='o')
plt.title('Pomegranate - Import/Export Ratio Over Time')
plt.xlabel('Year Range')
plt.ylabel('Import/Export Ratio')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""## Potato"""

# Visualization 1: Trends of Climate Index, Production, and Yield over time for each region
potato_data = ec_data[ec_data['Crop'] == 'potato'].copy()

regions = ['Punjab', 'Sindh', 'Khyber Pakhtoonkhaw', 'Balochistan']

for region in regions:
    plt.figure(figsize=(10, 6))
    sns.lineplot(data=potato_data, x='year_range', y=f'{region}_Climate_Index', label='Climate Index')
    sns.lineplot(data=potato_data, x='year_range', y=f'{region} Production', label='Production')
    sns.lineplot(data=potato_data, x='year_range', y=f'{region} Yield', label='Yield')
    plt.title(f'{region} - Trends of Climate Index, Production, and Yield')
    plt.xlabel('Year Range')
    plt.ylabel('Values')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Visualization 3: Regional contribution to total Production or Yield for all years
potato_data['Total Production'] = ec_data.loc[potato_data.index, [f'{region} Production' for region in regions]].sum(axis=1)

for region in regions:
    potato_data.loc[:, f'{region} Contribution'] = ec_data.loc[potato_data.index, f'{region} Production'] / potato_data['Total Production']

potato_data_melted = potato_data.melt(
    id_vars='year_range',
    value_vars=[f'{region} Contribution' for region in regions],
    var_name='Region',
    value_name='Contribution'
)

plt.figure(figsize=(10, 6))
sns.barplot(data=potato_data_melted, x='year_range', y='Contribution', hue='Region')
plt.title('Regional Contribution to Total Production')
plt.xlabel('Year Range')
plt.ylabel('Contribution')
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Visualization 4: Yearly comparison of Climate Index distributions across regions
potato_data_melted = potato_data.melt(
    id_vars='year_range',
    value_vars=[f'{region}_Climate_Index' for region in regions],
    var_name='Region',
    value_name='Climate Index'
)

plt.figure(figsize=(10, 6))
sns.histplot(data=potato_data_melted, x='Climate Index', hue='Region', kde=True, multiple='stack')
plt.title('Yearly Comparison of Climate Index Distributions')
plt.xlabel('Climate Index')
plt.ylabel('Frequency')
plt.tight_layout()
plt.show()

# Visualization 5: Growth rates of Production, Yield, and Climate Index for each region
for region in regions:
    potato_data[f'{region} Production Growth'] = potato_data[f'{region} Production'].pct_change() * 100
    potato_data[f'{region} Yield Growth'] = potato_data[f'{region} Yield'].pct_change() * 100
    potato_data[f'{region} Climate Index Growth'] = potato_data[f'{region}_Climate_Index'].pct_change() * 100

    plt.figure(figsize=(10, 6))
    sns.lineplot(data=potato_data, x='year_range', y=f'{region} Production Growth', label='Production Growth')
    sns.lineplot(data=potato_data, x='year_range', y=f'{region} Yield Growth', label='Yield Growth')
    sns.lineplot(data=potato_data, x='year_range', y=f'{region} Climate Index Growth', label='Climate Index Growth')
    plt.title(f'{region} - Growth Rates of Production, Yield, and Climate Index')
    plt.xlabel('Year Range')
    plt.ylabel('Growth Rate (%)')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Visualization: Import vs. Export Ratio Over Time for Banana
potato_data['Import/Export Ratio'] = potato_data['Import Value'] / potato_data['Export Value']
plt.figure(figsize=(10, 6))
sns.lineplot(data=potato_data, x='year_range', y='Import/Export Ratio', marker='o')
plt.title('Potato - Import/Export Ratio Over Time')
plt.xlabel('Year Range')
plt.ylabel('Import/Export Ratio')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""## Rice"""

# Visualization 1: Trends of Climate Index, Production, and Yield over time for each region
rice_data = ec_data[ec_data['Crop'] == 'rice'].copy()

regions = ['Punjab', 'Sindh', 'Khyber Pakhtoonkhaw', 'Balochistan']

for region in regions:
    plt.figure(figsize=(10, 6))
    sns.lineplot(data=rice_data, x='year_range', y=f'{region}_Climate_Index', label='Climate Index')
    sns.lineplot(data=rice_data, x='year_range', y=f'{region} Production', label='Production')
    sns.lineplot(data=rice_data, x='year_range', y=f'{region} Yield', label='Yield')
    plt.title(f'{region} - Trends of Climate Index, Production, and Yield')
    plt.xlabel('Year Range')
    plt.ylabel('Values')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Visualization 3: Regional contribution to total Production or Yield for all years
rice_data['Total Production'] = ec_data.loc[rice_data.index, [f'{region} Production' for region in regions]].sum(axis=1)

for region in regions:
    rice_data.loc[:, f'{region} Contribution'] = ec_data.loc[rice_data.index, f'{region} Production'] / rice_data['Total Production']

rice_data_melted = rice_data.melt(
    id_vars='year_range',
    value_vars=[f'{region} Contribution' for region in regions],
    var_name='Region',
    value_name='Contribution'
)

plt.figure(figsize=(10, 6))
sns.barplot(data=rice_data_melted, x='year_range', y='Contribution', hue='Region')
plt.title('Regional Contribution to Total Production')
plt.xlabel('Year Range')
plt.ylabel('Contribution')
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Visualization 4: Yearly comparison of Climate Index distributions across regions
rice_data_melted = rice_data.melt(
    id_vars='year_range',
    value_vars=[f'{region}_Climate_Index' for region in regions],
    var_name='Region',
    value_name='Climate Index'
)

plt.figure(figsize=(10, 6))
sns.histplot(data=rice_data_melted, x='Climate Index', hue='Region', kde=True, multiple='stack')
plt.title('Yearly Comparison of Climate Index Distributions')
plt.xlabel('Climate Index')
plt.ylabel('Frequency')
plt.tight_layout()
plt.show()

# Visualization 5: Growth rates of Production, Yield, and Climate Index for each region
for region in regions:
    rice_data[f'{region} Production Growth'] = rice_data[f'{region} Production'].pct_change() * 100
    rice_data[f'{region} Yield Growth'] = rice_data[f'{region} Yield'].pct_change() * 100
    rice_data[f'{region} Climate Index Growth'] = rice_data[f'{region}_Climate_Index'].pct_change() * 100

    plt.figure(figsize=(10, 6))
    sns.lineplot(data=rice_data, x='year_range', y=f'{region} Production Growth', label='Production Growth')
    sns.lineplot(data=rice_data, x='year_range', y=f'{region} Yield Growth', label='Yield Growth')
    sns.lineplot(data=rice_data, x='year_range', y=f'{region} Climate Index Growth', label='Climate Index Growth')
    plt.title(f'{region} - Growth Rates of Production, Yield, and Climate Index')
    plt.xlabel('Year Range')
    plt.ylabel('Growth Rate (%)')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Visualization: Import vs. Export Ratio Over Time for Banana
rice_data['Import/Export Ratio'] = rice_data['Import Value'] / rice_data['Export Value']
plt.figure(figsize=(10, 6))
sns.lineplot(data=rice_data, x='year_range', y='Import/Export Ratio', marker='o')
plt.title('Rice - Import/Export Ratio Over Time')
plt.xlabel('Year Range')
plt.ylabel('Import/Export Ratio')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""## Sugercane"""

# Visualization 1: Trends of Climate Index, Production, and Yield over time for each region
sugarcane_data = ec_data[ec_data['Crop'] == 'sugarcane'].copy()

regions = ['Punjab', 'Sindh', 'Khyber Pakhtoonkhaw', 'Balochistan']

for region in regions:
    plt.figure(figsize=(10, 6))
    sns.lineplot(data=sugarcane_data, x='year_range', y=f'{region}_Climate_Index', label='Climate Index')
    sns.lineplot(data=sugarcane_data, x='year_range', y=f'{region} Production', label='Production')
    sns.lineplot(data=sugarcane_data, x='year_range', y=f'{region} Yield', label='Yield')
    plt.title(f'{region} - Trends of Climate Index, Production, and Yield')
    plt.xlabel('Year Range')
    plt.ylabel('Values')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Visualization 3: Regional contribution to total Production or Yield for all years
sugarcane_data['Total Production'] = ec_data.loc[sugarcane_data.index, [f'{region} Production' for region in regions]].sum(axis=1)

for region in regions:
    sugarcane_data.loc[:, f'{region} Contribution'] = ec_data.loc[sugarcane_data.index, f'{region} Production'] / sugarcane_data['Total Production']

sugarcane_data_melted = sugarcane_data.melt(
    id_vars='year_range',
    value_vars=[f'{region} Contribution' for region in regions],
    var_name='Region',
    value_name='Contribution'
)

plt.figure(figsize=(10, 6))
sns.barplot(data=sugarcane_data_melted, x='year_range', y='Contribution', hue='Region')
plt.title('Regional Contribution to Total Production')
plt.xlabel('Year Range')
plt.ylabel('Contribution')
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Visualization 4: Yearly comparison of Climate Index distributions across regions
sugarcane_data_melted = sugarcane_data.melt(
    id_vars='year_range',
    value_vars=[f'{region}_Climate_Index' for region in regions],
    var_name='Region',
    value_name='Climate Index'
)

plt.figure(figsize=(10, 6))
sns.histplot(data=sugarcane_data_melted, x='Climate Index', hue='Region', kde=True, multiple='stack')
plt.title('Yearly Comparison of Climate Index Distributions')
plt.xlabel('Climate Index')
plt.ylabel('Frequency')
plt.tight_layout()
plt.show()

# Visualization 5: Growth rates of Production, Yield, and Climate Index for each region
for region in regions:
    sugarcane_data[f'{region} Production Growth'] = sugarcane_data[f'{region} Production'].pct_change() * 100
    sugarcane_data[f'{region} Yield Growth'] = sugarcane_data[f'{region} Yield'].pct_change() * 100
    sugarcane_data[f'{region} Climate Index Growth'] = sugarcane_data[f'{region}_Climate_Index'].pct_change() * 100

    plt.figure(figsize=(10, 6))
    sns.lineplot(data=sugarcane_data, x='year_range', y=f'{region} Production Growth', label='Production Growth')
    sns.lineplot(data=sugarcane_data, x='year_range', y=f'{region} Yield Growth', label='Yield Growth')
    sns.lineplot(data=sugarcane_data, x='year_range', y=f'{region} Climate Index Growth', label='Climate Index Growth')
    plt.title(f'{region} - Growth Rates of Production, Yield, and Climate Index')
    plt.xlabel('Year Range')
    plt.ylabel('Growth Rate (%)')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Visualization: Import vs. Export Ratio Over Time for Banana
sugarcane_data['Import/Export Ratio'] = sugarcane_data['Import Value'] / sugarcane_data['Export Value']
plt.figure(figsize=(10, 6))
sns.lineplot(data=sugarcane_data, x='year_range', y='Import/Export Ratio', marker='o')
plt.title('Sugercane - Import/Export Ratio Over Time')
plt.xlabel('Year Range')
plt.ylabel('Import/Export Ratio')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""## Tomato"""

# Visualization 1: Trends of Climate Index, Production, and Yield over time for each region
tomato_data = ec_data[ec_data['Crop'] == 'tomato'].copy()

regions = ['Punjab', 'Sindh', 'Khyber Pakhtoonkhaw', 'Balochistan']

for region in regions:
    plt.figure(figsize=(10, 6))
    sns.lineplot(data=tomato_data, x='year_range', y=f'{region}_Climate_Index', label='Climate Index')
    sns.lineplot(data=tomato_data, x='year_range', y=f'{region} Production', label='Production')
    sns.lineplot(data=tomato_data, x='year_range', y=f'{region} Yield', label='Yield')
    plt.title(f'{region} - Trends of Climate Index, Production, and Yield')
    plt.xlabel('Year Range')
    plt.ylabel('Values')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Visualization 3: Regional contribution to total Production or Yield for all years
tomato_data['Total Production'] = ec_data.loc[tomato_data.index, [f'{region} Production' for region in regions]].sum(axis=1)

for region in regions:
    tomato_data.loc[:, f'{region} Contribution'] = ec_data.loc[tomato_data.index, f'{region} Production'] / tomato_data['Total Production']

tomato_data_melted = tomato_data.melt(
    id_vars='year_range',
    value_vars=[f'{region} Contribution' for region in regions],
    var_name='Region',
    value_name='Contribution'
)

plt.figure(figsize=(10, 6))
sns.barplot(data=tomato_data_melted, x='year_range', y='Contribution', hue='Region')
plt.title('Regional Contribution to Total Production')
plt.xlabel('Year Range')
plt.ylabel('Contribution')
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Visualization 4: Yearly comparison of Climate Index distributions across regions
tomato_data_melted = tomato_data.melt(
    id_vars='year_range',
    value_vars=[f'{region}_Climate_Index' for region in regions],
    var_name='Region',
    value_name='Climate Index'
)

plt.figure(figsize=(10, 6))
sns.histplot(data=tomato_data_melted, x='Climate Index', hue='Region', kde=True, multiple='stack')
plt.title('Yearly Comparison of Climate Index Distributions')
plt.xlabel('Climate Index')
plt.ylabel('Frequency')
plt.tight_layout()
plt.show()

# Visualization 5: Growth rates of Production, Yield, and Climate Index for each region
for region in regions:
    tomato_data[f'{region} Production Growth'] = tomato_data[f'{region} Production'].pct_change() * 100
    tomato_data[f'{region} Yield Growth'] = tomato_data[f'{region} Yield'].pct_change() * 100
    tomato_data[f'{region} Climate Index Growth'] = tomato_data[f'{region}_Climate_Index'].pct_change() * 100

    plt.figure(figsize=(10, 6))
    sns.lineplot(data=tomato_data, x='year_range', y=f'{region} Production Growth', label='Production Growth')
    sns.lineplot(data=tomato_data, x='year_range', y=f'{region} Yield Growth', label='Yield Growth')
    sns.lineplot(data=tomato_data, x='year_range', y=f'{region} Climate Index Growth', label='Climate Index Growth')
    plt.title(f'{region} - Growth Rates of Production, Yield, and Climate Index')
    plt.xlabel('Year Range')
    plt.ylabel('Growth Rate (%)')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Visualization: Import vs. Export Ratio Over Time for Banana
tomato_data['Import/Export Ratio'] = tomato_data['Import Value'] / tomato_data['Export Value']
plt.figure(figsize=(10, 6))
sns.lineplot(data=tomato_data, x='year_range', y='Import/Export Ratio', marker='o')
plt.title('Tomato - Import/Export Ratio Over Time')
plt.xlabel('Year Range')
plt.ylabel('Import/Export Ratio')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""## Wheat"""

# Visualization 1: Trends of Climate Index, Production, and Yield over time for each region
wheat_data = ec_data[ec_data['Crop'] == 'wheat'].copy()

regions = ['Punjab', 'Sindh', 'Khyber Pakhtoonkhaw', 'Balochistan']

for region in regions:
    plt.figure(figsize=(10, 6))
    sns.lineplot(data=wheat_data, x='year_range', y=f'{region}_Climate_Index', label='Climate Index')
    sns.lineplot(data=wheat_data, x='year_range', y=f'{region} Production', label='Production')
    sns.lineplot(data=wheat_data, x='year_range', y=f'{region} Yield', label='Yield')
    plt.title(f'{region} - Trends of Climate Index, Production, and Yield')
    plt.xlabel('Year Range')
    plt.ylabel('Values')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Visualization 3: Regional contribution to total Production or Yield for all years
wheat_data['Total Production'] = ec_data.loc[wheat_data.index, [f'{region} Production' for region in regions]].sum(axis=1)

for region in regions:
    wheat_data.loc[:, f'{region} Contribution'] = ec_data.loc[wheat_data.index, f'{region} Production'] / wheat_data['Total Production']

wheat_data_melted = wheat_data.melt(
    id_vars='year_range',
    value_vars=[f'{region} Contribution' for region in regions],
    var_name='Region',
    value_name='Contribution'
)

plt.figure(figsize=(10, 6))
sns.barplot(data=wheat_data_melted, x='year_range', y='Contribution', hue='Region')
plt.title('Regional Contribution to Total Production')
plt.xlabel('Year Range')
plt.ylabel('Contribution')
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Visualization 4: Yearly comparison of Climate Index distributions across regions
wheat_data_melted = wheat_data.melt(
    id_vars='year_range',
    value_vars=[f'{region}_Climate_Index' for region in regions],
    var_name='Region',
    value_name='Climate Index'
)

plt.figure(figsize=(10, 6))
sns.histplot(data=wheat_data_melted, x='Climate Index', hue='Region', kde=True, multiple='stack')
plt.title('Yearly Comparison of Climate Index Distributions')
plt.xlabel('Climate Index')
plt.ylabel('Frequency')
plt.tight_layout()
plt.show()

# Visualization 5: Growth rates of Production, Yield, and Climate Index for each region
for region in regions:
    wheat_data[f'{region} Production Growth'] = wheat_data[f'{region} Production'].pct_change() * 100
    wheat_data[f'{region} Yield Growth'] = wheat_data[f'{region} Yield'].pct_change() * 100
    wheat_data[f'{region} Climate Index Growth'] = wheat_data[f'{region}_Climate_Index'].pct_change() * 100

    plt.figure(figsize=(10, 6))
    sns.lineplot(data=wheat_data, x='year_range', y=f'{region} Production Growth', label='Production Growth')
    sns.lineplot(data=wheat_data, x='year_range', y=f'{region} Yield Growth', label='Yield Growth')
    sns.lineplot(data=wheat_data, x='year_range', y=f'{region} Climate Index Growth', label='Climate Index Growth')
    plt.title(f'{region} - Growth Rates of Production, Yield, and Climate Index')
    plt.xlabel('Year Range')
    plt.ylabel('Growth Rate (%)')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Visualization: Import vs. Export Ratio Over Time for Banana
wheat_data['Import/Export Ratio'] = wheat_data['Import Value'] / wheat_data['Export Value']
plt.figure(figsize=(10, 6))
sns.lineplot(data=wheat_data, x='year_range', y='Import/Export Ratio', marker='o')
plt.title('Wheat - Import/Export Ratio Over Time')
plt.xlabel('Year Range')
plt.ylabel('Import/Export Ratio')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""## Dates"""

# Visualization 1: Trends of Climate Index, Production, and Yield over time for each region
dates_data = ec_data[ec_data['Crop'] == 'dates'].copy()

regions = ['Punjab', 'Sindh', 'Khyber Pakhtoonkhaw', 'Balochistan']

for region in regions:
    plt.figure(figsize=(10, 6))
    sns.lineplot(data=dates_data, x='year_range', y=f'{region}_Climate_Index', label='Climate Index')
    sns.lineplot(data=dates_data, x='year_range', y=f'{region} Production', label='Production')
    sns.lineplot(data=dates_data, x='year_range', y=f'{region} Yield', label='Yield')
    plt.title(f'{region} - Trends of Climate Index, Production, and Yield')
    plt.xlabel('Year Range')
    plt.ylabel('Values')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Visualization 3: Regional contribution to total Production or Yield for all years
dates_data['Total Production'] = ec_data.loc[dates_data.index, [f'{region} Production' for region in regions]].sum(axis=1)

for region in regions:
    dates_data.loc[:, f'{region} Contribution'] = ec_data.loc[dates_data.index, f'{region} Production'] / dates_data['Total Production']

dates_data_melted = dates_data.melt(
    id_vars='year_range',
    value_vars=[f'{region} Contribution' for region in regions],
    var_name='Region',
    value_name='Contribution'
)

plt.figure(figsize=(10, 6))
sns.barplot(data=dates_data_melted, x='year_range', y='Contribution', hue='Region')
plt.title('Regional Contribution to Total Production')
plt.xlabel('Year Range')
plt.ylabel('Contribution')
plt.xticks(rotation=45)
plt.legend()
plt.tight_layout()
plt.show()

# Visualization 4: Yearly comparison of Climate Index distributions across regions
dates_data_melted = dates_data.melt(
    id_vars='year_range',
    value_vars=[f'{region}_Climate_Index' for region in regions],
    var_name='Region',
    value_name='Climate Index'
)

plt.figure(figsize=(10, 6))
sns.histplot(data=dates_data_melted, x='Climate Index', hue='Region', kde=True, multiple='stack')
plt.title('Yearly Comparison of Climate Index Distributions')
plt.xlabel('Climate Index')
plt.ylabel('Frequency')
plt.tight_layout()
plt.show()

# Visualization 5: Growth rates of Production, Yield, and Climate Index for each region
for region in regions:
    dates_data[f'{region} Production Growth'] = dates_data[f'{region} Production'].pct_change() * 100
    dates_data[f'{region} Yield Growth'] = dates_data[f'{region} Yield'].pct_change() * 100
    dates_data[f'{region} Climate Index Growth'] = dates_data[f'{region}_Climate_Index'].pct_change() * 100

    plt.figure(figsize=(10, 6))
    sns.lineplot(data=dates_data, x='year_range', y=f'{region} Production Growth', label='Production Growth')
    sns.lineplot(data=dates_data, x='year_range', y=f'{region} Yield Growth', label='Yield Growth')
    sns.lineplot(data=dates_data, x='year_range', y=f'{region} Climate Index Growth', label='Climate Index Growth')
    plt.title(f'{region} - Growth Rates of Production, Yield, and Climate Index')
    plt.xlabel('Year Range')
    plt.ylabel('Growth Rate (%)')
    plt.xticks(rotation=45)
    plt.legend()
    plt.tight_layout()
    plt.show()

# Visualization: Import vs. Export Ratio Over Time for Banana
dates_data['Import/Export Ratio'] = dates_data['Import Value'] / dates_data['Export Value']
plt.figure(figsize=(10, 6))
sns.lineplot(data=dates_data, x='year_range', y='Import/Export Ratio', marker='o')
plt.title('Dates - Import/Export Ratio Over Time')
plt.xlabel('Year Range')
plt.ylabel('Import/Export Ratio')
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

"""## Model Training and Testing

## Punjab
"""

# Complete Code for Punjab
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Ensure eco_data is loaded before running this script
# Create a new column 'year_start' by extracting the starting year
ec_data['year_start'] = ec_data['year_range'].str.split('-').str[0].astype(int)

# Punjab Model Training
features = ['year_start', 'Punjab Area', 'Punjab_Climate_Index']
targets = ['Punjab Production', 'Punjab Yield']

X = ec_data[features]
y = ec_data[targets]  # Multi-output target

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Linear Regression
lr = LinearRegression()
lr.fit(X_train, y_train)
lr_pred = lr.predict(X_test)

# Random Forest Regressor
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
rf_pred = rf.predict(X_test)

# Decision Tree Regressor
dt = DecisionTreeRegressor(random_state=42)
dt.fit(X_train, y_train)
dt_pred = dt.predict(X_test)

# Evaluate Models
def evaluate_multi_output(model_name, y_test, y_pred, targets):
    for i, target in enumerate(targets):
        rmse = mean_squared_error(y_test.iloc[:, i], y_pred[:, i], squared=False)
        r2 = r2_score(y_test.iloc[:, i], y_pred[:, i])
        print(f"{model_name} - {target}: RMSE = {rmse:.2f}, R² = {r2:.2f}")

print("\n--- Results for Punjab ---")
evaluate_multi_output("Linear Regression", y_test, lr_pred, targets)
evaluate_multi_output("Random Forest", y_test, rf_pred, targets)
evaluate_multi_output("Decision Tree", y_test, dt_pred, targets)

"""## Sindh"""

# Complete Code for Sindh
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Ensure eco_data is loaded before running this script
# Create a new column 'year_start' by extracting the starting year
ec_data['year_start'] = ec_data['year_range'].str.split('-').str[0].astype(int)

# Sindh Model Training
features = ['year_start', 'Sindh Area', 'Sindh_Climate_Index']
targets = ['Sindh Production', 'Sindh Yield']

X = ec_data[features]
y = ec_data[targets]  # Multi-output target

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Linear Regression
lr = LinearRegression()
lr.fit(X_train, y_train)
lr_pred = lr.predict(X_test)

# Random Forest Regressor
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
rf_pred = rf.predict(X_test)

# Decision Tree Regressor
dt = DecisionTreeRegressor(random_state=42)
dt.fit(X_train, y_train)
dt_pred = dt.predict(X_test)

# Evaluate Models
def evaluate_multi_output(model_name, y_test, y_pred, targets):
    for i, target in enumerate(targets):
        rmse = mean_squared_error(y_test.iloc[:, i], y_pred[:, i], squared=False)
        r2 = r2_score(y_test.iloc[:, i], y_pred[:, i])
        print(f"{model_name} - {target}: RMSE = {rmse:.2f}, R² = {r2:.2f}")

print("\n--- Results for Sindh ---")
evaluate_multi_output("Linear Regression", y_test, lr_pred, targets)
evaluate_multi_output("Random Forest", y_test, rf_pred, targets)
evaluate_multi_output("Decision Tree", y_test, dt_pred, targets)

"""## Khyber PakhtoonKhaw"""

# Complete Code for KPK
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Ensure eco_data is loaded before running this script
# Create a new column 'year_start' by extracting the starting year
ec_data['year_start'] = ec_data['year_range'].str.split('-').str[0].astype(int)

# KPK Model Training
features = ['year_start', 'Khyber Pakhtoonkhaw Area', 'Khyber Pakhtoonkhaw_Climate_Index']
targets = ['Khyber Pakhtoonkhaw Production', 'Khyber Pakhtoonkhaw Yield']

X = ec_data[features]
y = ec_data[targets]  # Multi-output target

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Linear Regression
lr = LinearRegression()
lr.fit(X_train, y_train)
lr_pred = lr.predict(X_test)

# Random Forest Regressor
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
rf_pred = rf.predict(X_test)

# Decision Tree Regressor
dt = DecisionTreeRegressor(random_state=42)
dt.fit(X_train, y_train)
dt_pred = dt.predict(X_test)

# Evaluate Models
def evaluate_multi_output(model_name, y_test, y_pred, targets):
    for i, target in enumerate(targets):
        rmse = mean_squared_error(y_test.iloc[:, i], y_pred[:, i], squared=False)
        r2 = r2_score(y_test.iloc[:, i], y_pred[:, i])
        print(f"{model_name} - {target}: RMSE = {rmse:.2f}, R² = {r2:.2f}")

print("\n--- Results for KPK ---")
evaluate_multi_output("Linear Regression", y_test, lr_pred, targets)
evaluate_multi_output("Random Forest", y_test, rf_pred, targets)
evaluate_multi_output("Decision Tree", y_test, dt_pred, targets)

"""## Balochistan"""

# Complete Code for Balochistan
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.ensemble import RandomForestRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score

# Ensure eco_data is loaded before running this script
# Create a new column 'year_start' by extracting the starting year
ec_data['year_start'] = ec_data['year_range'].str.split('-').str[0].astype(int)

# Balochistan Model Training
features = ['year_start', 'Balochistan Area', 'Balochistan_Climate_Index']
targets = ['Balochistan Production', 'Balochistan Yield']

X = ec_data[features]
y = ec_data[targets]  # Multi-output target

# Train-Test Split
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Linear Regression
lr = LinearRegression()
lr.fit(X_train, y_train)
lr_pred = lr.predict(X_test)

# Random Forest Regressor
rf = RandomForestRegressor(n_estimators=100, random_state=42)
rf.fit(X_train, y_train)
rf_pred = rf.predict(X_test)

# Decision Tree Regressor
dt = DecisionTreeRegressor(random_state=42)
dt.fit(X_train, y_train)
dt_pred = dt.predict(X_test)

# Evaluate Models
def evaluate_multi_output(model_name, y_test, y_pred, targets):
    for i, target in enumerate(targets):
        rmse = mean_squared_error(y_test.iloc[:, i], y_pred[:, i], squared=False)
        r2 = r2_score(y_test.iloc[:, i], y_pred[:, i])
        print(f"{model_name} - {target}: RMSE = {rmse:.2f}, R² = {r2:.2f}")

print("\n--- Results for Balochistan ---")
evaluate_multi_output("Linear Regression", y_test, lr_pred, targets)
evaluate_multi_output("Random Forest", y_test, rf_pred, targets)
evaluate_multi_output("Decision Tree", y_test, dt_pred, targets)

