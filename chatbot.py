# -*- coding: utf-8 -*-
"""chatbot.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1xpsPPqar3WFbMtgtVV3S3X6I9XvVq7R1
"""

import google.generativeai as genai
import pandas as pd
from flask import Flask, request, jsonify

# Configure the Gemini API Key (Replace with your API key)
genai.configure(api_key="YOUR_API_KEY")

# Load the climate dataset
climate_data = pd.read_excel("climate_final.xlsx")

# Initialize Flask app
app = Flask(_name_)

# Function to interact with the Gemini model
def chatbot_response(user_input):
    try:
        # Initialize the model
        model = genai.GenerativeModel("gemini-1.5-flash")

        # Generate a response
        response = model.generate_content(user_input)

        return response.text  # Return the response
    except Exception as e:
        return f"Error: {e}"

# Function to handle dataset-specific queries
def dataset_query_bot(user_input):
    if "climate index" in user_input.lower():
        # Example: Fetch average climate index for a specific region
        region = user_input.split()[-1]  # Assume user inputs like "climate index Sindh"
        col_name = f"{region}_climate_index"  # Replace with the actual column name
        if col_name in climate_data.columns:
            avg_index = climate_data[col_name].mean()
            return f"The average climate index for {region} is {avg_index:.2f}."
        else:
            return "Region not found. Please specify a valid region."
    else:
        # Fallback to generic AI response
        return chatbot_response(user_input)

# Flask route for chatbot
@app.route("/chat", methods=["POST"])
def chat():
    user_input = request.json.get("message")
    response = dataset_query_bot(user_input)
    return jsonify({"response": response})

# Run the Flask app
if _name_ == "_main_":
    app.run(debug=True)