# -*- coding: utf-8 -*-
"""climate.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1WJ6QZFPDOD1gGD0xJpoqWlWjSa1Yy9D2

import pandas as pd

# Step 1: Load the data
file_path = "climatic_combined.xlsx"  # Path to your uploaded file
data = pd.read_excel(file_path)

# Step 2: Identify all time columns
time_columns = [col for col in data.columns if 'time' in col.lower()]

# Step 3: Create a unified 'year' column using the first time column
data['year'] = pd.to_datetime(data[time_columns[0]]).dt.date

# Step 4: Drop all separate time columns
data.drop(columns=time_columns, inplace=True)

# Step 5: Move 'year' column to the start
columns_order = ['year'] + [col for col in data.columns if col != 'year']
data = data[columns_order]

# Step 6: Save the updated dataset
output_file_path = "climatic_modified.xlsx"
#data.to_excel(output_file_path, index=False)

print(f"Updated dataset saved to: {output_file_path}")
"
"""

#data.to_excel(output_file_path, index=False)

#data['year']

"""import pandas as pd

dropped_cols = ["Sindh_sunrise","Sindh_sunset","Sindh_daylight_duration","Punjab_sunrise","Punjab_sunset","Punjab_daylight_duration","Kpk_sunrise","Kpk_sunset","Kpk_daylight_duration","Balochistan_sunrise","Balochistan_sunset","Balochistan_daylight_duration"]

# Load the Excel file and delete the specified columns
def delete_columns(file_path):
    df = pd.read_excel(file_path)
    df.drop(columns=dropped_cols, inplace=True)
    df.to_excel(file_path, index=False)

# Example usage
file_path = "climatic_modified.xlsx"
delete_columns(file_path)

import pandas as pd
sindh_eva = pd.read_excel("Sindh_evatransportation.xlsx")
Punjab_eva = pd.read_excel("Punjab_evatransportation.xlsx")
Kpk_eva = pd.read_excel("KPK_evatransportation.xlsx")
Baloch_eva = pd.read_excel("Balochistan_evatransportation.xlsx")

sindh_eva.head(2)

# Adding Evatranpiration feature

import pandas as pd

# Step 1: Load the main climatic data file
main_file_path = "climatic_modif.xlsx"
data = pd.read_excel(main_file_path)

# Step 2: Load evapotranspiration files for each region
sindh_eva = pd.read_excel("Sindh_evatransportation.xlsx")
Punjab_eva = pd.read_excel("Punjab_evatransportation.xlsx")
Kpk_eva = pd.read_excel("KPK_evatransportation.xlsx")
Baloch_eva = pd.read_excel("Balochistan_evatransportation.xlsx")

data['year'] = data['year'].astype(str)
sindh_eva['year'] = sindh_eva['year'].astype(str)
Punjab_eva['year'] = Punjab_eva['year'].astype(str)
Kpk_eva['year'] = Kpk_eva['year'].astype(str)
Baloch_eva['year'] = Baloch_eva['year'].astype(str)

# Step 4: Merge evapotranspiration data for each region
data = data.merge(sindh_eva[['year', 'et0_fao_evapotranspiration']], on='year', how='left')
data.rename(columns={'et0_fao_evapotranspiration': 'Sindh_fao_evapotranspiration'}, inplace=True)

data = data.merge(Punjab_eva[['year', 'et0_fao_evapotranspiration']], on='year', how='left')
data.rename(columns={'et0_fao_evapotranspiration': 'Punjab_fao_evapotranspiration'}, inplace=True)

data = data.merge(Kpk_eva[['year', 'et0_fao_evapotranspiration']], on='year', how='left')
data.rename(columns={'et0_fao_evapotranspiration': 'Kpk_fao_evapotranspiration'}, inplace=True)

data = data.merge(Baloch_eva[['year', 'et0_fao_evapotranspiration']], on='year', how='left')
data.rename(columns={'et0_fao_evapotranspiration': 'Balochistan_fao_evapotranspiration'}, inplace=True)

# Step 5: Save the updated dataset
output_file_path = "climatic_data_with_evapotranspiration.xlsx"
data.to_excel(output_file_path, index=False)

print(f"Updated dataset saved to: {output_file_path}")
# Step 4: Reorder the columns as needed
column_order = [
    'year',
    # Sindh columns
    'Sindh_Region', 'Sindh_temperature_2m_max', 'Sindh_temperature_2m_min',
    'Sindh_temperature_2m_mean', 'Sindh_precipitation_sum', 'Sindh_rain_sum',
    'Sindh_wind_speed_10m_max', 'Sindh_wind_gusts_10m_max', 'Sindh_wind_direction_10m_dominant',
    'Sindh_fao_evapotranspiration', 'Sindh_precipitation_hours',
    # Punjab columns
    'Punjab_Region', 'Punjab_temperature_2m_max', 'Punjab_temperature_2m_min',
    'Punjab_temperature_2m_mean', 'Punjab_precipitation_sum', 'Punjab_rain_sum',
    'Punjab_wind_speed_10m_max', 'Punjab_wind_gusts_10m_max', 'Punjab_wind_direction_10m_dominant',
    'Punjab_fao_evapotranspiration', 'Punjab_precipitation_hours',
    # KPK columns
    'Kpk_Region', 'Kpk_temperature_2m_max', 'Kpk_temperature_2m_min',
    'Kpk_temperature_2m_mean', 'Kpk_precipitation_sum', 'Kpk_rain_sum',
    'Kpk_wind_speed_10m_max', 'Kpk_wind_gusts_10m_max', 'Kpk_wind_direction_10m_dominant',
    'Kpk_fao_evapotranspiration', 'Kpk_precipitation_hours',
    # Balochistan columns
    'Balochistan_Region', 'Balochistan_temperature_2m_max', 'Balochistan_temperature_2m_min',
    'Balochistan_temperature_2m_mean', 'Balochistan_precipitation_sum', 'Balochistan_rain_sum',
    'Balochistan_wind_speed_10m_max', 'Balochistan_wind_gusts_10m_max',
    'Balochistan_wind_direction_10m_dominant', 'Balochistan_fao_evapotranspiration',
    'Balochistan_precipitation_hours'
]

data = data[column_order]  # Reorder the DataFrame columns

# Step 5: Save the updated dataset
output_file_path = "climatic_data_with_evapotranspiration_ordered.xlsx"
data.to_excel(output_file_path, index=False)

print(f"Updated dataset saved to: {output_file_path}")

# Aggregating the Monthly Values
"""

import pandas as pd

# Step 1: Load the data
file_path = "climatic_data_with_evapotranspiration.xlsx"  # Adjust the file path if needed
data = pd.read_excel(file_path)

# Step 2: Convert the 'year' column to datetime
data['year'] = pd.to_datetime(data['year'])

# Step 3: Create a 'year_month' column in the format 'YYYY-MM'
data['year_month'] = data['year'].dt.to_period('M').astype(str)

# Step 4: Define aggregation functions for each column
aggregation_methods = {
    # Sindh Region
    'Sindh_temperature_2m_max': 'mean',
    'Sindh_temperature_2m_min': 'mean',
    'Sindh_temperature_2m_mean': 'mean',
    'Sindh_precipitation_sum': 'sum',
    'Sindh_rain_sum': 'sum',
    'Sindh_wind_speed_10m_max': 'mean',
    'Sindh_wind_gusts_10m_max': 'max',
    'Sindh_wind_direction_10m_dominant': 'mean',  # Aggregating as mean since it's numerical
    'Sindh_fao_evapotranspiration': 'mean',
    'Sindh_precipitation_hours': 'sum',

    # Punjab Region
    'Punjab_temperature_2m_max': 'mean',
    'Punjab_temperature_2m_min': 'mean',
    'Punjab_temperature_2m_mean': 'mean',
    'Punjab_precipitation_sum': 'sum',
    'Punjab_rain_sum': 'sum',
    'Punjab_wind_speed_10m_max': 'mean',
    'Punjab_wind_gusts_10m_max': 'max',
    'Punjab_wind_direction_10m_dominant': 'mean',  # Aggregating as mean since it's numerical
    'Punjab_fao_evapotranspiration': 'mean',
    'Punjab_precipitation_hours': 'sum',

    # Kpk Region
    'Kpk_temperature_2m_max': 'mean',
    'Kpk_temperature_2m_min': 'mean',
    'Kpk_temperature_2m_mean': 'mean',
    'Kpk_precipitation_sum': 'sum',
    'Kpk_rain_sum': 'sum',
    'Kpk_wind_speed_10m_max': 'mean',
    'Kpk_wind_gusts_10m_max': 'max',
    'Kpk_wind_direction_10m_dominant': 'mean',  # Aggregating as mean since it's numerical
    'Kpk_fao_evapotranspiration': 'mean',
    'Kpk_precipitation_hours': 'sum',

    # Balochistan Region
    'Balochistan_temperature_2m_max': 'mean',
    'Balochistan_temperature_2m_min': 'mean',
    'Balochistan_temperature_2m_mean': 'mean',
    'Balochistan_precipitation_sum': 'sum',
    'Balochistan_rain_sum': 'sum',
    'Balochistan_wind_speed_10m_max': 'mean',
    'Balochistan_wind_gusts_10m_max': 'max',
    'Balochistan_wind_direction_10m_dominant': 'mean',  # Aggregating as mean since it's numerical
    'Balochistan_fao_evapotranspiration': 'mean',
    'Balochistan_precipitation_hours': 'sum',
}

# Step 5: Group by 'year_month' and aggregate, keeping region columns as is
monthly_data = data.groupby(['year_month', 'Sindh_Region', 'Punjab_Region', 'Kpk_Region', 'Balochistan_Region']).agg(aggregation_methods).reset_index()

# Step 6: Reorder columns so that each region starts with its region column followed by its features
columns_order = [
    'year_month',
    'Sindh_Region', 'Sindh_temperature_2m_max', 'Sindh_temperature_2m_min', 'Sindh_temperature_2m_mean',
    'Sindh_precipitation_sum', 'Sindh_rain_sum', 'Sindh_wind_speed_10m_max', 'Sindh_wind_gusts_10m_max',
    'Sindh_wind_direction_10m_dominant', 'Sindh_fao_evapotranspiration', 'Sindh_precipitation_hours',

    'Punjab_Region', 'Punjab_temperature_2m_max', 'Punjab_temperature_2m_min', 'Punjab_temperature_2m_mean',
    'Punjab_precipitation_sum', 'Punjab_rain_sum', 'Punjab_wind_speed_10m_max', 'Punjab_wind_gusts_10m_max',
    'Punjab_wind_direction_10m_dominant', 'Punjab_fao_evapotranspiration', 'Punjab_precipitation_hours',

    'Kpk_Region', 'Kpk_temperature_2m_max', 'Kpk_temperature_2m_min', 'Kpk_temperature_2m_mean',
    'Kpk_precipitation_sum', 'Kpk_rain_sum', 'Kpk_wind_speed_10m_max', 'Kpk_wind_gusts_10m_max',
    'Kpk_wind_direction_10m_dominant', 'Kpk_fao_evapotranspiration', 'Kpk_precipitation_hours',

    'Balochistan_Region', 'Balochistan_temperature_2m_max', 'Balochistan_temperature_2m_min', 'Balochistan_temperature_2m_mean',
    'Balochistan_precipitation_sum', 'Balochistan_rain_sum', 'Balochistan_wind_speed_10m_max', 'Balochistan_wind_gusts_10m_max',
    'Balochistan_wind_direction_10m_dominant', 'Balochistan_fao_evapotranspiration', 'Balochistan_precipitation_hours'
]

# Reorder columns in the DataFrame based on the list
monthly_data = monthly_data[columns_order]
monthly_data = monthly_data.round(2)
# Step 7: Save the aggregated monthly data to an Excel file
output_file_path = "climatic_dataset.xlsx"
monthly_data.to_excel(output_file_path, index=False)

print(f"Monthly aggregated dataset with ordered regions saved to: {output_file_path}")

import pandas as pd
new = pd.read_excel('climatic_dataset.xlsx')

new.head(2)

"""# Normalization of columns"""

new.iloc[2:4,1:12]

from sklearn.preprocessing import MinMaxScaler

# Step 1: Load your dataset
file_path = "climatic_dataset.xlsx"
data = pd.read_excel(file_path)

# Step 2: List of numerical columns to normalize
columns_to_normalize = [
    'Sindh_temperature_2m_max', 'Sindh_temperature_2m_min', 'Sindh_temperature_2m_mean',
    'Sindh_precipitation_sum', 'Sindh_rain_sum', 'Sindh_wind_speed_10m_max',
    'Sindh_wind_gusts_10m_max', 'Sindh_wind_direction_10m_dominant',
    'Sindh_fao_evapotranspiration', 'Sindh_precipitation_hours',
    'Punjab_temperature_2m_max', 'Punjab_temperature_2m_min', 'Punjab_temperature_2m_mean',
    'Punjab_precipitation_sum', 'Punjab_rain_sum', 'Punjab_wind_speed_10m_max',
    'Punjab_wind_gusts_10m_max', 'Punjab_wind_direction_10m_dominant',
    'Punjab_fao_evapotranspiration', 'Punjab_precipitation_hours',
    'Kpk_temperature_2m_max', 'Kpk_temperature_2m_min', 'Kpk_temperature_2m_mean',
    'Kpk_precipitation_sum', 'Kpk_rain_sum', 'Kpk_wind_speed_10m_max',
    'Kpk_wind_gusts_10m_max', 'Kpk_wind_direction_10m_dominant',
    'Kpk_fao_evapotranspiration', 'Kpk_precipitation_hours',
    'Balochistan_temperature_2m_max', 'Balochistan_temperature_2m_min',
    'Balochistan_temperature_2m_mean', 'Balochistan_precipitation_sum',
    'Balochistan_rain_sum', 'Balochistan_wind_speed_10m_max',
    'Balochistan_wind_gusts_10m_max', 'Balochistan_wind_direction_10m_dominant',
    'Balochistan_fao_evapotranspiration', 'Balochistan_precipitation_hours'
]

# Step 3: Initialize the Min-Max Scaler
scaler = MinMaxScaler()

# Step 4: Normalize each numerical column and insert the new column next to the original
for col in columns_to_normalize:
    normalized_col_name = f"{col}_normalized"  # Define the new column name
    # Normalize the column
    data[normalized_col_name] = scaler.fit_transform(data[[col]])
    data[normalized_col_name] = data[normalized_col_name].round(2)
    # Insert the normalized column next to the original column
    col_index = data.columns.get_loc(col)  # Get the index of the original column
    normalized_col = data.pop(normalized_col_name)  # Temporarily remove the new column
    data.insert(col_index + 1, normalized_col_name, normalized_col)  # Insert it after the original column

# Step 5: Save the updated dataset
output_file_path = "climatic_normalize.xlsx"
data.to_excel(output_file_path, index=False)

print(f"Normalized dataset saved to: {output_file_path}")

r = pd.read_excel('climatic_normalize.xlsx')

r.head()

save = pd.read_excel("climatic_normalize.xlsx")

save.columns

from sklearn.preprocessing import MinMaxScaler

# Step 1: Load your dataset
file_path = "climatic_dataset.xlsx"
data = pd.read_excel(file_path)

# Step 2: Identify numerical columns to normalize (exclude region columns)
columns_to_normalize = [
    col for col in data.columns if col not in ['year_month','Sindh_Region', 'Punjab_Region', 'Kpk_Region', 'Balochistan_Region']
]

# Step 3: Initialize the Min-Max Scaler
scaler = MinMaxScaler()

# Step 4: Normalize each numerical column and replace original values
for col in columns_to_normalize:
    data[col] = scaler.fit_transform(data[[col]])  # Normalize and replace the original values
    data[col] = data[col].round(2)  # Round normalized values to 2 decimal places

# Step 5: Save the updated dataset with normalized values
output_file_path = "climate_backup.xlsx"
data.to_excel(output_file_path, index=False)

print(f"Dataset with normalized values replacing original values saved to: {output_file_path}")

saved = pd.read_excel('climate_backup.xlsx')

saved.columns

# Step 1: Load your dataset
file_path = "climatic_dataset.xlsx"
data = pd.read_excel(file_path)

# Step 2: Define region and temperature columns for each region
regions = ['Sindh', 'Punjab', 'Kpk', 'Balochistan']
region_columns = [f'{region}_Region' for region in regions]
temperature_columns = {
    region: [f'{region}_temperature_2m_max', f'{region}_temperature_2m_min', f'{region}_temperature_2m_mean']
    for region in regions
}

# Step 3: Automatically identify all numerical columns (excluding region columns)
numerical_columns = data.select_dtypes(include=['float64', 'int64']).columns.tolist()
columns_to_normalize = [col for col in numerical_columns if col not in region_columns]

# Step 4: Initialize Min-Max Scaler
scaler = MinMaxScaler()

# Step 5: Normalize all numerical columns (except combined temperature)
for col in columns_to_normalize:
    if not any(col in temp_cols for temp_cols in temperature_columns.values()):  # Skip individual temperature columns
        normalized_col_name = f"{col}_normalized"  # Define the normalized column name
        data[normalized_col_name] = scaler.fit_transform(data[[col]])  # Normalize and create a new column
        data[normalized_col_name] = data[normalized_col_name].round(2)  # Round normalized values

        # Place the normalized column right after the original column
        col_index = data.columns.get_loc(col)  # Find the position of the original column
        normalized_col = data.pop(normalized_col_name)  # Temporarily remove the normalized column
        data.insert(col_index + 1, normalized_col_name, normalized_col)  # Insert it in the correct position

# Step 6: Combine and normalize temperature columns for each region
for region, temp_cols in temperature_columns.items():
    combined_normalized_col_name = f'{region}_Combined_temperature_normalized'  # Name of the combined normalized column

    # Combine and normalize temperature columns (mean of temp columns -> normalized)
    combined_temperature = data[temp_cols].mean(axis=1)  # Combine (mean of the temperature columns)
    data[combined_normalized_col_name] = scaler.fit_transform(combined_temperature.values.reshape(-1, 1))  # Normalize combined column
    data[combined_normalized_col_name] = data[combined_normalized_col_name].round(2)  # Round normalized values

    # Insert the combined normalized column immediately after the temperature columns
    last_temp_col_index = data.columns.get_loc(temp_cols[-1])  # Find the position of the last temperature column
    combined_normalized_col = data.pop(combined_normalized_col_name)  # Temporarily remove the combined normalized column
    data.insert(last_temp_col_index + 1, combined_normalized_col_name, combined_normalized_col)  # Insert it in the correct position

# Step 7: Save the updated dataset
output_file_path = "climate_fin.xlsx"
data.to_excel(output_file_path, index=False)

print(f"Dataset with all columns normalized and combined temperature columns saved to: {output_file_path}")

import pandas as pd

data = pd.read_excel("climate_fin.xlsx")

data.shape

import pandas as pd

data = pd.read_excel("climate_final.xlsx")

# Define weights for the Climate Index calculation
w1 = 0.25  # Weight for temperature normalization
w2 = 0.25  # Weight for precipitation normalization
w3 = 0.25  # Weight for shortwave radiation normalization
w4 = 0.25  # Weight for evapotranspiration normalization

# Calculate Climate Index for each region and insert it into the dataset at the right position
regions = ['Sindh', 'Punjab', 'Kpk', 'Balochistan']  # List of regions
for region in regions:
    # Calculate Climate Index for the current region
    data[f'{region}_Climate_Index'] = (
        w1 * data[f'{region}_Combined_temperature_normalized'] +  # Replace with normalized temperature column
        w2 * data[f'{region}_precipitation_sum_normalized'] +  # Replace with normalized precipitation column
        w3 * data[f'{region}_shortwave_radiation_normalized'] +  # Replace with normalized shortwave column
        w4 * data[f'{region}_fao_evapotranspiration_normalized']  # Replace with normalized evapotranspiration column
    )

    # Find the location where the region ends and insert the Climate Index column after that
    last_col = [col for col in data.columns if region in col][-1]
    col_index = data.columns.get_loc(last_col) + 1
    cols = list(data.columns)
    cols.insert(col_index, cols.pop(cols.index(f'{region}_Climate_Index')))
    data = data[cols]

# Save the updated dataset with Climate Index columns
output_file_path = 'updated_climate_with_region_indexes.xlsx'  # Specify output file path
data.to_excel(output_file_path, index=False)

print(f"Climate Index columns added for each region and dataset saved to {output_file_path}")

"""# Regional Wise Comparison of All Climate Indexes of Regions Using A Historgram"""

import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset (replace with your file path if necessary)
file_path = 'climate_final.xlsx'  # Update the file path if needed
data = pd.read_excel(file_path)

# Generate histograms for Climate Index values for all regions
plt.figure(figsize=(14, 8))

# Plot histogram for each region
for region, index_col in zip(['Sindh', 'Punjab', 'Kpk', 'Balochistan'],
                             ['Sindh_Climate_Index', 'Punjab_Climate_Index', 'Kpk_Climate_Index', 'Balochistan_Climate_Index']):
    plt.hist(data[index_col], bins=15, alpha=0.6, label=region, edgecolor='black', linewidth=1.2)

# Add titles, labels, and legend
plt.title('Histogram of Climate Index Values Across Regions', fontsize=16, fontweight='bold')
plt.xlabel('Climate Index', fontsize=14, fontweight='bold')
plt.ylabel('Frequency', fontsize=14, fontweight='bold')
plt.xticks(fontsize=12, fontweight='bold')
plt.yticks(fontsize=12, fontweight='bold')
plt.legend(title="Region", fontsize=12, title_fontsize=14)
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()

# Show the histogram
plt.show()

import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset (replace with your file path if necessary)
file_path = 'climate_final.xlsx'  # Update the file path if needed
data = pd.read_excel(file_path)

# Ensure the 'year_month' column is in datetime format
data['year'] = pd.to_datetime(data['year_month']).dt.year

# Group data by year and plot histograms for each year
plt.figure(figsize=(14, 8))
for year in data['year'].unique():
    yearly_data = data[data['year'] == year]
    plt.hist(yearly_data[['Sindh_Climate_Index', 'Punjab_Climate_Index', 'Kpk_Climate_Index', 'Balochistan_Climate_Index']].values.flatten(),
             bins=15, alpha=0.6, label=f'Year {year}', edgecolor='black', linewidth=1.2)

# Add titles, labels, and legend
plt.title('Histogram of Climate Index Values Grouped by Year', fontsize=16, fontweight='bold')
plt.xlabel('Climate Index', fontsize=14, fontweight='bold')
plt.ylabel('Frequency', fontsize=14, fontweight='bold')
plt.xticks(fontsize=12, fontweight='bold')
plt.yticks(fontsize=12, fontweight='bold')
plt.legend(title="Year", fontsize=10, title_fontsize=12, loc='upper right')
plt.grid(axis='y', linestyle='--', alpha=0.7)
plt.tight_layout()

# Show the histogram
plt.show()

"""# Individual Region Wise Comparison of Climate Index Values"""

import pandas as pd
import matplotlib.pyplot as plt

# Load the dataset
file_path = 'climate_final.xlsx'  # Update the file path if needed
data = pd.read_excel(file_path)

# Convert the 'year_month' column to datetime for accurate monthly handling
data['year_month'] = pd.to_datetime(data['year_month'], format='%Y-%m')

# Define regions and their corresponding Climate Index columns
regions = ['Sindh', 'Punjab', 'Kpk', 'Balochistan']
index_columns = [f'{region}_Climate_Index' for region in regions]

# Generate separate line charts for each region using month-wise values
for region, index_col in zip(regions, index_columns):
    plt.figure(figsize=(14, 6))

    # Plot the monthly Climate Index values for the region
    plt.plot(data['year_month'], data[index_col], label=f'{region} Climate Index', marker='o', linestyle='-', color='blue')

    # Add titles, labels, and legend
    plt.title(f'Monthly Climate Index Trends for {region}', fontsize=16, fontweight='bold')
    plt.xlabel('Year-Month', fontsize=14, fontweight='bold')
    plt.ylabel('Climate Index', fontsize=14, fontweight='bold')
    plt.xticks(rotation=45, fontsize=10)
    plt.yticks(fontsize=12)
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.legend(fontsize=12)
    plt.tight_layout()

    # Show the plot
    plt.show()

"""# Seasonal Wise Comparison of Climate Index ( Regions )"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Define the seasons dictionary
seasons = {
    "Winter": ["12", "01", "02"],
    "Spring": ["03", "04", "05"],
    "Summer": ["06", "07", "08"],
    "Autumn": ["09", "10", "11"]
}

# Load the climate data
file_path = 'fyp_dataset.xlsx'  # Adjust the path to your file location
climate_data = pd.read_excel(file_path, sheet_name='Climate Data')

# Add a "Season" column based on the `year_month` column
def get_season(year_month):
    month = year_month.split("-")[1]
    for season, months in seasons.items():
        if month in months:
            return season
    return None

climate_data['Season'] = climate_data['year_month'].apply(get_season)

# Melt the data to make it suitable for Seaborn (if there are multiple regions)
melted_data = pd.melt(
    climate_data,
    id_vars=['year_month', 'Season'],
    value_vars=[
        'Sindh_Climate_Index',
        'Balochistan_Climate_Index',
        'Punjab_Climate_Index',
        'Kpk_Climate_Index'
    ],  # Add columns for Punjab and KPK
    var_name='Region',
    value_name='Climate_Index'
)

# Plot using Seaborn
plt.figure(figsize=(12, 6))
sns.lineplot(
    data=melted_data,
    x='Season',
    y='Climate_Index',
    hue='Region',
    marker='o'
)
plt.title("Seasonal Climate Index Trends by Region")
plt.ylabel("Climate Index")
plt.xlabel("Season")
plt.xticks(rotation=45)
plt.legend(title="Region", bbox_to_anchor=(1.05, 1), loc='upper left')
plt.grid(True)
plt.tight_layout()
plt.show()

# Filter the data for a specific season (e.g., Winter)
winter_data = climate_data[climate_data['Season'] == 'Winter']

# Display the raw data for Winter to validate the individual values
winter = winter_data[['year_month', 'Season', 'Sindh_Climate_Index', 'Punjab_Climate_Index','Balochistan_Climate_Index','Kpk_Climate_Index']]
print(winter)

"""# Individual Seasonal Charts"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Define the seasons dictionary
seasons = {
    "Winter": ["12", "01", "02"],
    "Spring": ["03", "04", "05"],
    "Summer": ["06", "07", "08"],
    "Autumn": ["09", "10", "11"]
}

# Load the climate data
file_path = 'fyp_dataset.xlsx'  # Adjust the path to your file location
climate_data = pd.read_excel(file_path, sheet_name='Climate Data')

# Add a "Season" column based on the `year_month` column
def get_season(year_month):
    year, month = year_month.split("-")
    for season, months in seasons.items():
        if month in months:
            return season, year
    return None, year

climate_data[['Season', 'Year']] = climate_data['year_month'].apply(
    lambda ym: pd.Series(get_season(ym))
)

# Melt the data to make it suitable for Seaborn
melted_data = pd.melt(
    climate_data,
    id_vars=['Year', 'Season'],
    value_vars=[
        'Sindh_Climate_Index',
        'Punjab_Climate_Index',
        'Balochistan_Climate_Index',
        'Kpk_Climate_Index'
    ],
    var_name='Region',
    value_name='Climate_Index'
)

# Plot individual charts for each season
for season in seasons.keys():
    season_data = melted_data[melted_data['Season'] == season]

    plt.figure(figsize=(12, 6))
    sns.lineplot(
        data=season_data,
        x='Year',
        y='Climate_Index',
        hue='Region',
        marker='o'
    )
    plt.title(f"{season} Climate Index Trends by Region")
    plt.ylabel("Climate Index (Normalized)")
    plt.xlabel("Year")
    plt.ylim(0, 0.8)  # Set Y-axis limit to 0.8
    plt.xticks(rotation=45)
    plt.legend(title="Region", bbox_to_anchor=(1.05, 1), loc='upper left')
    plt.grid(True)
    plt.tight_layout()
    plt.show()

"""# Merged Dataset Generation ( Climate and Crop Merged Dataset)"""

import pandas as pd

# Load the workbook with both datasets
file_path = 'combined_workbook.xlsx'
climate_data = pd.read_excel(file_path, sheet_name='Climate Data')
economy_data = pd.read_excel(file_path, sheet_name='Economy Data')

# Step 1: Prepare Climate Dataset
# Convert `year_month` to datetime and extract year
climate_data['year'] = pd.to_datetime(climate_data['year_month']).dt.year
climate_data['month'] = pd.to_datetime(climate_data['year_month']).dt.month

# Step 2: Calculate Yearly Climate Index Averages for 2-Year Ranges
# Generate year ranges like '2000-01', '2001-02', etc.
climate_data['year_range'] = climate_data['year'].astype(str) + '-' + (climate_data['year'] + 1).astype(str)

# Calculate the average Climate Index for each region in each year range
climate_avg = (
    climate_data.groupby('year_range')[['Sindh_Climate_Index', 'Punjab_Climate_Index', 'Kpk_Climate_Index', 'Balochistan_Climate_Index']]
    .mean()
    .reset_index()
)

# Step 3: Prepare Economy Dataset
# Ensure the 'Year' column matches 'year_range' format
economy_data = economy_data.rename(columns={"Year": "year_range"})

# Merge the averaged Climate Index with the Economy dataset
new_economy_dataset = pd.merge(economy_data, climate_avg, on='year_range', how='left')

# Step 4: Save All Sheets in a Single Workbook
output_file = 'updated_combined_workbook.xlsx'
with pd.ExcelWriter(output_file, engine='openpyxl') as writer:
    climate_data.to_excel(writer, index=False, sheet_name='Climate Data')
    economy_data.to_excel(writer, index=False, sheet_name='Economy Data')
    new_economy_dataset.to_excel(writer, index=False, sheet_name='Economy with Climate Index')

print(f"Updated workbook saved at {output_file}")

"""# Machine Learning Modeling"""

import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import numpy as np
import matplotlib.pyplot as plt

# Step 1: Load the dataset
file_path = "fyp_dataset.xlsx"  # Replace with the correct file path
data = pd.read_excel(file_path)

# Step 2: Define regions and their respective target columns
regions = ['Sindh', 'Punjab', 'Kpk', 'Balochistan']  # List of regions
results = []  # To store evaluation metrics for each region

# Step 3: Loop through each region and train the model
for region in regions:
    print(f"\n--- Processing region: {region} ---")

    # Define target and normalized features for the current region
    target_col = f"{region}_Climate_Index"  # Climate Index as Target
    normalized_features = [
        f"{region}_Combined_temperature_normalized",
        f"{region}_precipitation_sum_normalized",
        f"{region}_shortwave_radiation_normalized",
        f"{region}_rain_sum_normalized",
        f"{region}_wind_speed_10m_max_normalized",
        f"{region}_wind_gusts_10m_max_normalized",
        f"{region}_fao_evapotranspiration_normalized",
        f"{region}_precipitation_hours_normalized",
    ]

    # Extract features (X) and target (y)
    X = data[normalized_features]  # Use normalized columns as features
    y = data[target_col]  # Use existing normalized Climate Index directly as target

    # Train-Test Split
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Train the Random Forest Regressor
    rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
    rf_model.fit(X_train, y_train)  # Train directly on normalized target

    # Predict on the test set
    y_pred = rf_model.predict(X_test)  # Predictions directly in normalized form

    # Evaluate the Model
    mae = mean_absolute_error(y_test, y_pred)
    rmse = np.sqrt(mean_squared_error(y_test, y_pred))
    r2 = r2_score(y_test, y_pred)

    print(f"Mean Absolute Error (MAE): {mae:.2f}")
    print(f"Root Mean Squared Error (RMSE): {rmse:.2f}")
    print(f"R-Squared Score (R2): {r2:.2f}")

    # Append results for the region
    results.append({'Region': region, 'MAE': mae, 'RMSE': rmse, 'R2': r2})

    # Plot Actual vs Predicted Results
    plt.figure(figsize=(8, 5))
    plt.scatter(y_test, y_pred, color='blue', alpha=0.6)
    plt.plot(y_test, y_test, color='red', linewidth=2, label='Perfect Fit')
    plt.title(f"Actual vs Predicted Climate Index - {region}")
    plt.xlabel("Actual Climate Index")
    plt.ylabel("Predicted Climate Index")
    plt.legend()
    plt.show()

# Step 4: Save results for all regions
results_df = pd.DataFrame(results)
output_file = "climate_index_results.xlsx"
#results_df.to_excel(output_file, index=False)
print(f"\nResults for all regions saved to: {output_file}")

print(y_pred)

from sklearn.model_selection import cross_val_score

scores = cross_val_score(rf_model, X, y, cv=5, scoring='r2')
print(f"Cross-Validation R2 Scores: {scores}")
print(f"Mean Cross-Validation R2 Score: {scores.mean():.2f}")



import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score
import matplotlib.pyplot as plt
import numpy as np

# Step 1: Load the dataset
file_path = "fyp_dataset.xlsx"
data = pd.read_excel(file_path)

# Step 2: Define a function for processing each region
def train_predict_region(data, region):
    print(f"\n--- Processing Region: {region} ---")

    # Features - Exclude Climate Index components and use secondary features
    features = [
        f"{region}_rain_sum_normalized",
        f"{region}_wind_speed_10m_max_normalized",
        f"{region}_wind_gusts_10m_max_normalized",
        f"{region}_precipitation_hours_normalized"
    ]
    target_col = f"{region}_Climate_Index"

    # Extract features and target variable
    X = data[features]
    y = data[target_col]

    # Step 3: Train-Test Split
    X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

    # Step 4: Train the Random Forest Regressor
    rf_model = RandomForestRegressor(n_estimators=100, random_state=42)
    rf_model.fit(X_train, y_train)

    # Step 5: Predict for all rows (full dataset) and test set
    y_pred_full = rf_model.predict(X)  # Predictions for 288 rows
    y_pred_test = rf_model.predict(X_test)

    # Step 6: Evaluate the model
    mae = mean_absolute_error(y_test, y_pred_test)
    rmse = np.sqrt(mean_squared_error(y_test, y_pred_test))
    r2 = r2_score(y_test, y_pred_test)

    print(f"Mean Absolute Error (MAE): {mae:.4f}")
    print(f"Root Mean Squared Error (RMSE): {rmse:.4f}")
    print(f"R-Squared Score (R2): {r2:.4f}")

    # Step 7: Display Predictions for all 288 rows
    predicted_values = pd.DataFrame({
        'Actual Climate Index': y,
        'Predicted Climate Index': y_pred_full
    })
    print("\nFirst 10 Predicted Values:")
    print(predicted_values.head(10))

    # Step 8: Plot Actual vs Predicted (Test Set)
    plt.figure(figsize=(8, 5))
    plt.scatter(y_test, y_pred_test, color='blue', alpha=0.6, label='Predicted (Test)')
    plt.plot(y_test, y_test, color='red', linewidth=2, label='Perfect Fit')
    plt.title(f"Actual vs Predicted Climate Index - {region}")
    plt.xlabel("Actual Climate Index")
    plt.ylabel("Predicted Climate Index")
    plt.legend()
    plt.grid()
    plt.show()

# Step 9: Process all regions
regions = ['Sindh', 'Punjab', 'Kpk', 'Balochistan']
for region in regions:
    train_predict_region(data, region)